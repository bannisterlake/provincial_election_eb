{"version":3,"sources":["logo.svg","components/partyCard.js","components/GainsBar.js","components/GainsDiv.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","styles","makeStyles","partyContainer","props","backgroundColor","party","color","padding","maxHeight","margin","borderRadius","fontWeight","letterSpacing","display","justifyContent","PartyCard","classes","className","nameShort","result","height","width","position","borderBottom","gainsBar","bottom","left","GainsBar","gainsDiv","flex","flexDirection","alignItems","Gains","useState","max","setMax","useEffect","tempMax","data","partyResults","forEach","console","log","seatChange","Math","abs","map","i","key","main","alignContent","right","title","marginLeft","border","borderRight","marginRight","chartHolder","partyBars","alignSelf","chartDiv","App","setData","loading","toggleLoading","getData","fetch","then","res","json","votesPercent","top","padAngle","datum","y","innerRadius","x","labels","style","fill","d","GainsDiv","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f42e337f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\r\nimport {makeStyles} from '@material-ui/core/styles'\r\n\r\nconst styles = makeStyles({\r\n    partyContainer: props => ({\r\n        backgroundColor: props.party.color,\r\n        padding: 5,\r\n        maxHeight: 40,\r\n        margin: 3,\r\n        borderRadius: 5,\r\n        color: 'white',\r\n        fontWeight: 'bold',\r\n        letterSpacing: 1,\r\n        display: 'flex',\r\n        justifyContent: 'space-between'\r\n    })\r\n})\r\n\r\nconst PartyCard = (props) => {\r\n\r\n    const classes = styles(props)\r\n\r\n    return (\r\n        <div className={classes.partyContainer}>\r\n            <div>{props.party.nameShort}</div>\r\n            <div>{props.result}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PartyCard","import React from 'react'\r\nimport {makeStyles} from '@material-ui/core/styles'\r\n\r\nconst styles = makeStyles({\r\n    partyContainer: props => ({\r\n        height: 25,\r\n        margin: 3,\r\n        width: '80%',\r\n        color: 'black',\r\n        fontWeight: 'bold',\r\n        letterSpacing: 1,\r\n        display: 'flex',\r\n        position: 'relative',\r\n        justifyContent: 'space-between',\r\n        borderBottom: '1px solid black',\r\n    }),\r\n    gainsBar: props=>({\r\n        backgroundColor: props.color,\r\n        position: \"absolute\",\r\n        bottom: 0,\r\n        left: '50%',\r\n        width: `${props.width/2}%`,\r\n        height: '60%',\r\n        margin: 0,\r\n        padding: 0\r\n    })\r\n})\r\n\r\nconst GainsBar = (props) => {\r\n\r\n    const classes = styles(props)\r\n\r\n    return (\r\n        <div className={classes.partyContainer}>\r\n            -\r\n            <div className={classes.gainsBar}></div>\r\n            +\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GainsBar","import React, {useState, useEffect} from 'react'\r\nimport {makeStyles} from '@material-ui/core/styles'\r\n\r\n\r\nimport Gainsbar from './GainsBar'\r\n\r\nconst styles = makeStyles({\r\n\tgainsDiv: {\r\n        flex: 5,\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n\t\talignItems: 'center',\r\n\t},\r\n})\r\n\r\nconst Gains = (props) => {\r\n    \r\n    const [max, setMax] = useState(0)\r\n\r\n    const classes = styles(props)\r\n\r\n\r\n    useEffect(()=>{\r\n        let tempMax = 0\r\n        if (props.data) {\r\n            props.data.partyResults.forEach(party=> {\r\n                console.log(\"party\",party.seatChange, tempMax)\r\n                if (Math.abs(party.seatChange) > tempMax) {\r\n                    tempMax = Math.abs(party.seatChange)\r\n                }\r\n            })\r\n            setMax(tempMax)\r\n\r\n        }\r\n\r\n    },[props.data])\r\n\r\n    return (\r\n        <div className={classes.gainsDiv}>\r\n            {props.data && props.data.partyResults.map((party,i)=>{\r\n                return <Gainsbar key={i} color={party.color} width={Math.abs(party.seatChange)/(max + 1)* 100}/>\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Gains","import React, {useState, useEffect} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport {makeStyles} from '@material-ui/core/styles'\nimport {VictoryPie, Slice} from 'victory'\n\n\nimport PartyCard from './components/partyCard'\nimport GainsDiv from './components/GainsDiv'\nimport GainsBar from './components/GainsBar'\n\nconst styles = makeStyles({\n\tmain: {\n\t\t// fontFamily: 'Roboto',\n\t\tdisplay: 'flex',\n\t\tposition: 'relative',\n\t\tflexDirection: 'row',\n\t\tpadding: '10px 20px',\n\t\tbackgroundColor: '#f2f2f2',\n\t\talignContent: 'center'\n\t}, \n\tleft: {\n\t\tflex: 3,\n\t\theight: 250,\n\t\talignItems: 'center',\n\t\t\n\t},\n\tright: {\n\t\tflex: 4,\n\t\theight: 250\n\n\t},\n\ttitle: {\n\t\tfontWeight: 'bold',\n\t\tmarginLeft: 5\n\t}, \n\tborder: {\n\t\tborderRight: '1px solid grey',\n\t\tmarginRight: 10\n\t},\n\tchartHolder: {\n\t\tdisplay: 'flex',\n\t\tflexDirection: 'row',\n\t\theight: '100%',\n\t\talignItems: 'center'\n\t},\n\tpartyBars: {\n\t\tflex: 3,\n\t\talignSelf: 'center'\n\t},\n\tchartDiv: {\n\t\tflex: 2\n\t},\n\n})\n\nfunction App() {\n\n  const [data, setData] = useState(null)\n  const [loading, toggleLoading] = useState(true)\n\n  const classes = styles();\n\n  useEffect(()=>[\n    getData()\n  ],[])\n\n  const getData = () => {\n    fetch('/overallresults')\n      .then(res=>{\n        console.log(res)\n        return res.json()})\n      .then(json=>{\n        console.log(json)\n        setData(json);\n        toggleLoading(false)\n      })\n  }\n\n  return (\n    <div className={classes.main}>\n      { !loading && \n        <>\n        <div className={classes.left}>\n\t\t\t\t<div className={classes.title}>Popular vote</div>\n\t\t\t\t<div className={classes.chartHolder}>\n\t\t\t\t\t<div className={classes.partyBars}>\n\t\t\t\t\t\t{data && data.partyResults.map((party,i)=>{\n              console.log(party)\n\t\t\t\t\t\t\treturn <PartyCard key={i} party={party} result={`${party.votesPercent}%`} />\n\t\t\t\t\t\t})}\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className={classes.chartDiv}>\n\t\t\t\t\t\t{data &&\n\t\t\t\t\t\t\t<VictoryPie\n\t\t\t\t\t\t\t\tpadding={{top:0,left:20, right: 20, bottom:0}}\n\t\t\t\t\t\t\t\tpadAngle={({ datum }) => datum.y}\n\t\t\t\t\t\t\t\tinnerRadius={130}\n\t\t\t\t\t\t\t\tdata={data.partyResults}\n\t\t\t\t\t\t\t\tx={\"nameShort\"}\n\t\t\t\t\t\t\t\ty={\"votesPercent\"}\n\t\t\t\t\t\t\t\tlabels={({datum})=>''}\n\t\t\t\t\t\t\t\tstyle={{\t\n\t\t\t\t\t\t\t\t\tdata: {fill: (d)=>d.datum.color}\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div className={classes.border}/>\n\t\t\t<div className={classes.right}>\n\t\t\t\t<div className={classes.title}>Gains/Loses</div>\n\t\t\t\t<div className={classes.chartHolder}>\n\t\t\t\t\t<div className={classes.partyBars}>\n\t\t\t\t\t\t{data && data.partyResults.map((party,i)=>{\n\t\t\t\t\t\t\treturn <PartyCard key={i} party={party} result={`${party.seatChange}`} />\n\t\t\t\t\t\t})}\n\t\t\t\t\t</div>\n\t\t\t\t\t<GainsDiv data={data}/>\n\t\t\t\t</div>\n\t\t\t</div>\n        </>\n      }\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}