{"version":3,"sources":["components/Tooltip.js","components/MapTest.js","components/Results.js","components/Sidebar.js","components/LoadingAnimation.js","components/Declaration.js","App.js","serviceWorker.js","index.js"],"names":["styles","makeStyles","geoTooltip","fontFamily","display","flexDirection","transition","tooltipName","fontSize","fontWeight","tooltipPolls","color","paddingBottom","tooltipWinner","backgroundColor","props","padding","Tooltip","classes","className","results","name","pollsReported","pollsTotal","style","id","partyCode","mapContainer","flex","resetButton","boxShadow","height","width","alignItems","justifyContent","borderRadius","background","cursor","defaultStyle","weight","fillOpacity","selectedStyle","MapTest","useState","initBounds","setInitBounds","currentBounds","setCurrentBounds","geo","setgeo","mapRef","useRef","geoRef","useEffect","console","log","current","axios","get","then","res","status","data","bounds","L","geoJSON","getBounds","leafletElement","fitBounds","catch","err","selectedRiding","zoomToED","eachLayer","layer","feature","properties","Name","toUpperCase","setStyle","resetBounds","getTooltipData","getPartyResults","EDName","find","ed","e","getFillByResults","parties","length","votes","fill","party","nameShort","ridingName","map","findLayer","tooltipclose","handleSelectRiding","featureData","featureColor","_tooltip","_content","includes","newTooltip","ReactDOMServer","renderToString","setTooltipContent","sticky","direction","bindTooltip","Map","ref","zoomSnap","zoomDelta","minZoom","TileLayer","attribution","url","GeoJSON","partyResults","fillColor","onClick","layerBounds","closeTooltip","clickedRiding","onEachFeature","onMouseOver","onMouseOut","PED_Name_E","position","resultsRoot","candidateRoot","resultsInfo","imageDiv","screensize","marginBottom","minWidth","overflow","bottom","textAlign","candidateLeftDiv","candidateName","candidateRightDiv","justifySelf","votesDiv","Candidate","candidate","prevCandidate","setCandidate","imgRef","setTimeout","split","pop","alt","onLoad","target","onError","src","cachedHeadFilename","firstName","lastName","isIncumbent","percent","toLocaleString","isElected","paddingRight","Results","i","partyColor","findParty","getPartyColor","key","sidebar","title","top","minHeight","paddingLeft","content","overflowX","overflowY","LocationButton","Sidebar","arrow","toggleArrow","menu","setMenu","setResults","onMouseEnter","resultId","onMouseLeave","resultData","children","CSSTransition","in","timeout","unmountOnExit","classNames","sort","a","b","result","small","LoadingAnimation","useStyles","root","alignSelf","Declaration","declarationText","app","left","App","setData","loading","toggleLoading","setParties","selectedResults","setSelectedResults","timer","window","innerWidth","setDeclarationText","declaration","setDeclaration","declaredColor","setDeclaredColor","getData","startTimer","getResultsFromURL","setInterval","updateResults","overallResult","partyName","resultText","text","partyWinner","hash","location","decodeURI","replace","riding","toLowerCase","initResults","newResults","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.123c2337.chunk.js","sourcesContent":["import React, {useEffect} from 'react'\r\n\r\nimport {makeStyles} from '@material-ui/core'\r\n\r\nconst styles = makeStyles({\r\n    geoTooltip: {\r\n        fontFamily: 'Roboto, Ubuntu, Helvetica',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        transition: '1s'\r\n    },\r\n    tooltipName: {\r\n        fontSize: 20,\r\n\r\n        fontWeight: 'bolder',\r\n    },\r\n    tooltipPolls: {\r\n        fontSize: 14,\r\n        color: 'grey',\r\n        paddingBottom: 10\r\n    },\r\n    tooltipWinner:{\r\n        backgroundColor: props=>props.color,\r\n        color: props=>props.color === '#C0C0C0'? 'black' : 'white',\r\n        padding: 5, \r\n        '& #tooltipPartyCode': {\r\n            fontSize: 18\r\n        },\r\n        '& #tooltipWinnerName': {\r\n            fontSize: 20,\r\n            fontWeight: 'bolder'\r\n        }\r\n    }\r\n})\r\n\r\n\r\nconst Tooltip = (props) => {\r\n\r\n    const classes = styles(props)\r\n\r\n\r\n\r\n    return (\r\n        <div className={classes.geoTooltip}>\r\n            <div className={classes.tooltipName}>{props.results.name}</div>\r\n            <div className={classes.tooltipPolls}>{props.results.pollsReported}/{props.results.pollsTotal} polls reported</div>\r\n            {props.results.pollsReported > 0 && \r\n            <div className={classes.tooltipWinner} style={{backgroundColor: props.color}}>\r\n                <div id=\"tooltipPartycode\">{props.results.results[0].partyCode}</div>\r\n                <div id=\"tooltipWinnerName\">{props.results.results[0].name}</div>\r\n            </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Tooltip","import React, { useState, useEffect, useRef } from 'react'\r\nimport ReactDOMServer from 'react-dom/server'\r\nimport { Map, TileLayer, GeoJSON } from 'react-leaflet'\r\nimport Control from 'react-leaflet-control'\r\nimport L from 'leaflet'\r\n\r\nimport ZoomOutMapIcon from '@material-ui/icons/ZoomOutMap';\r\n\r\nimport {makeStyles} from '@material-ui/core'\r\n\r\nimport Tooltip from './Tooltip'\r\nimport axios from 'axios'\r\n\r\nconst styles= makeStyles({\r\n    mapContainer: {\r\n        flex:1\r\n    },\r\n    resetButton: {\r\n        display: 'flex',\r\n        boxShadow: '0 1px 4px rgba(0,0,0,0.65)',\r\n        height: 26,\r\n        width: 26,\r\n        fontSize: 14,\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        borderRadius: '4px',\r\n        background: '#FFFFFF',\r\n        cursor: 'pointer',\r\n        color: 'black'\r\n        \r\n    }\r\n})\r\n\r\nconst defaultStyle={\r\n    weight: 0.9,\r\n    // color: 'black',\r\n    fillOpacity: 0.9\r\n}\r\n\r\nconst selectedStyle={\r\n    weight: 3,\r\n    fillOpacity: 1\r\n}\r\n\r\n\r\n const MapTest = (props) => {\r\n    // const [position, setPosition] = useState({lat: 54, lng: -105, zoom: 5});\r\n    const [initBounds, setInitBounds] = useState();\r\n    const [currentBounds, setCurrentBounds] = useState();\r\n    const [geo, setgeo] = useState(null);\r\n    // const [selectedRiding, setSelectedRiding] = useState(null)\r\n    const mapRef = useRef(null);\r\n    const geoRef = useRef(null)\r\n\r\n    const classes = styles();\r\n\r\n    useEffect(()=> {\r\n        console.log('render map')\r\n        if(!mapRef.current) {\r\n            console.log('no mapReff')\r\n            return\r\n        } else {\r\n            axios.get('/geojson')\r\n                .then(res=>{\r\n                    if (res.status === 200) {\r\n                        setgeo(res.data)\r\n                        var bounds = L.geoJSON(res.data).getBounds()\r\n                        setInitBounds(bounds)\r\n                        var map = mapRef.current.leafletElement\r\n                        map.fitBounds(bounds)\r\n                    }\r\n                })\r\n                .catch(err=>{\r\n                    console.log(err);\r\n                    console.log('error getting geojson data')\r\n                })\r\n        }   \r\n    }, [])\r\n\r\n    useEffect(()=> {\r\n        console.log('here 1')\r\n        if (props.selectedRiding) {\r\n            zoomToED(props.selectedRiding.name)\r\n            if (geoRef.current) {\r\n                const geo = geoRef.current.leafletElement;\r\n\r\n                geo.eachLayer(layer=>{\r\n                    if (layer.feature.properties.Name.toUpperCase() === props.selectedRiding.name.toUpperCase()) {\r\n                        layer.setStyle(selectedStyle)\r\n                    }\r\n                })\r\n            }\r\n            \r\n        } else {\r\n            resetBounds()\r\n        }\r\n    }, [props.selectedRiding])\r\n\r\n    useEffect(()=> {\r\n        if (geoRef.current) {\r\n            geoRef.current.leafletElement.eachLayer(layer=>{\r\n                getTooltipData(layer.feature, layer)\r\n            });\r\n        }\r\n    }, [props.data])\r\n\r\n    const getPartyResults = (EDName) => {\r\n        try {\r\n            if (props.data) {\r\n                let partyResults = props.data.data.find(ed=>\r\n                    ed.name.toUpperCase() === EDName.toUpperCase()\r\n                )\r\n                return partyResults\r\n            }\r\n        } catch (e) {\r\n            console.log(\"Couldn't get party results\")\r\n        }\r\n    }\r\n    \r\n    const getFillByResults = (results) =>{\r\n        try {\r\n            if(props.parties && results.results.length > 0) {\r\n                if (results.results[0].votes > 0) {\r\n                if (results.results[0].partyCode === 'NDP') {\r\n                    return 'rgb(221, 102, 0)'\r\n                }\r\n                let fill = props.parties.find(party=>{\r\n                    return party.nameShort === results.results[0].partyCode\r\n                })\r\n                if (fill) {\r\n                    return fill.color\r\n                } else {\r\n                    return 'rgb(192, 192, 192)'\r\n                }\r\n            } else {\r\n                return 'rgb(89, 91, 91)'\r\n            }\r\n        }\r\n        } catch(err) {\r\n            console.log(\"Error getting Geo Fill for \", results.name)\r\n            return 'rgb(89, 91, 91)'\r\n        } \r\n    }\r\n\r\n\r\n    const handleFill = (feature) => {\r\n        console.log('handle here')\r\n        if (feature) {\r\n            let partyResults = getPartyResults(feature.properties.Name);\r\n            let fill = 'rgb(89, 91, 91)'\r\n            if (partyResults) {\r\n                fill = getFillByResults(partyResults)\r\n                if (props.selectedRiding) {\r\n                    if (props.selectedRiding.name === feature.properties.Name) {\r\n                        return {\r\n                            fillColor: fill,\r\n                            weight: 3,\r\n                            color: 'black',\r\n                            fillOpacity: 1\r\n                        }\r\n                    }\r\n                } \r\n                return {\r\n                    fillColor: fill,\r\n                    weight: 0.9,\r\n                    color: 'black',\r\n                    fillOpacity: 0.9\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleClick = (e) => {\r\n        try {\r\n            var layerBounds = e.layer.getBounds();\r\n            if (currentBounds === layerBounds) {\r\n                e.layer.closeTooltip()\r\n            } \r\n            const map = mapRef.current.leafletElement;\r\n            setCurrentBounds(layerBounds)\r\n            map.fitBounds(layerBounds)\r\n            const clickedRiding = e.layer.feature.properties.Name\r\n            const partyResults = getPartyResults(clickedRiding)\r\n            props.handleSelectRiding(partyResults)\r\n            // setSelectedRiding(e.layer.feature.properties.Name)\r\n            e.layer.setStyle(selectedStyle)\r\n        } catch(e) {\r\n\r\n        }\r\n        \r\n    }\r\n\r\n    const zoomToED = (ridingName) => {\r\n        try {\r\n            if (geoRef.current) {\r\n                const map = mapRef.current.leafletElement;\r\n                const geo = geoRef.current.leafletElement;\r\n                var findLayer = null;\r\n                geo.eachLayer(layer=>{\r\n                    if (layer.feature.properties.Name.toUpperCase() === ridingName.toUpperCase()) {\r\n                        findLayer = layer\r\n                    }\r\n                })\r\n                map.fitBounds(findLayer.getBounds())\r\n            }    \r\n        } catch (err) {\r\n            console.log('error zooming on riding')\r\n        }\r\n    }\r\n\r\n    const resetBounds = () => {\r\n        try {\r\n            const map = mapRef.current.leafletElement;\r\n            map.fitBounds(initBounds)    \r\n            map.tooltipclose();\r\n\r\n            props.handleSelectRiding(null)\r\n        } catch (err) {\r\n\r\n        }\r\n    }\r\n\r\n    function highlightFeature(e) {\r\n        e.layer.setStyle(selectedStyle)\r\n    }\r\n\r\n    function resetFeature(e) {\r\n        if (props.selectedRiding) {\r\n            let layerName = e.layer.feature.properties.PED_Name_E\r\n            if (layerName.toUpperCase() !== props.selectedRiding.name.toUpperCase()) {\r\n                e.layer.setStyle(defaultStyle)\r\n            } \r\n        } else {\r\n            e.layer.setStyle(defaultStyle)\r\n        }\r\n    }\r\n\r\n    const getTooltipData = (feature, layer) => {\r\n        if (feature.properties ) {\r\n            try {\r\n                const featureData = getPartyResults(feature.properties.Name)\r\n                const featureColor = getFillByResults(featureData)\r\n                if (featureData && featureColor) {\r\n                    if (!layer._tooltip) {\r\n                        layer.bindTooltip(ReactDOMServer.renderToString(<Tooltip results={featureData} color={featureColor} />), {sticky: false, direction: 'top'})\r\n                    } else if (!layer._tooltip._content.includes(featureColor)) {\r\n                        let newTooltip = ReactDOMServer.renderToString(<Tooltip results={featureData} color={featureColor} />)\r\n                        layer.setTooltipContent(newTooltip, {sticky: false, direction: 'top'})\r\n                    }\r\n                }\r\n            } catch(e) {\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={classes.mapContainer}>\r\n            <Map \r\n                ref={mapRef} \r\n                zoomSnap={0.25}\r\n                zoomDelta={0.5}\r\n                minZoom={3}    \r\n            >\r\n                <TileLayer\r\n                attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                url=\"https://{s}.basemaps.cartocdn.com/light_nolabels/{z}/{x}/{y}.png\"\r\n                />\r\n\r\n                {geo && \r\n                <GeoJSON \r\n                    ref={geoRef} \r\n                    style={handleFill} \r\n                    data={geo} \r\n                    onClick={handleClick} \r\n                    onEachFeature={getTooltipData}\r\n                    onMouseOver={highlightFeature}\r\n                    onMouseOut={resetFeature}\r\n                />  \r\n                }   \r\n                <Control position=\"topleft\">\r\n                    <a id=\"zoomOut\" style={{color: 'black !important'}} className={`leaflet-control-zoom leaflet-bar ${classes.resetButton}`} onClick={resetBounds}>\r\n                        <ZoomOutMapIcon />\r\n                    </a>\r\n                </Control>\r\n            </Map>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default MapTest;","import React, {useEffect, useRef, useState} from 'react';\r\nimport {makeStyles} from '@material-ui/core'\r\n\r\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\r\n\r\nconst styles = makeStyles(props=>({\r\n    resultsRoot: {\r\n        padding: 10,\r\n      \r\n    },\r\n    candidateRoot: {\r\n        position: 'relative',\r\n        display: 'flex', \r\n        flexDirection: 'row',\r\n        height: 120,\r\n        padding: '10px 0'\r\n    },\r\n    resultsInfo: {\r\n        display: 'flex', \r\n        alignItems: 'center',\r\n        justifyContent: 'space-between',\r\n        '& #pollsReported': {\r\n            fontSize: 12,\r\n            fontWeight: 'bolder'\r\n        },\r\n        '& #totalVotes': {\r\n            fontSize: 10,\r\n            color: 'darkslategrey'\r\n        }\r\n    },\r\n    imageDiv: {\r\n        height: props=>props.screensize < 700 ? 100 : 120,\r\n        position: 'relative',\r\n        marginBottom: 25,\r\n        minWidth: 50,\r\n        width: props=>props.screensize < 700 ? 50 : 70,\r\n        borderRadius: '8px',\r\n        overflow: 'hidden',\r\n        '& #partyCode': {\r\n            position: 'absolute', \r\n            bottom: 8,\r\n            color: 'white',\r\n            width: '100%',\r\n            textAlign: 'center'\r\n        },\r\n        '& img': {\r\n            width: '100%',\r\n            transition: 'width 500ms'\r\n        }\r\n    },\r\n    candidateLeftDiv: {\r\n        flex: 3, \r\n        display: 'flex', \r\n        flexDirection: 'column',\r\n        justifyContent: 'space-between',\r\n        padding: '10px 0 10px 10px',\r\n\r\n        '& #candidateIncumbent': {\r\n            fontSize: 13,\r\n            fontWeight: 'lighter'\r\n        }\r\n    },\r\n    candidateName: {\r\n        '& #candidateFirst': {\r\n            fontWeight: 'bolder',\r\n            fontSize: props=>props.screensize < 700 ? 12 : 14,\r\n\r\n        },\r\n        '& #candidateLast': {\r\n            fontWeight: 'bolder',\r\n            fontSize: props=>props.screensize < 700 ? 16 : 22,\r\n        }\r\n    }, \r\n    candidateRightDiv: {\r\n        flex: 2, \r\n        justifySelf: 'flex-end',\r\n        display: 'flex', \r\n        flexDirection: 'column',\r\n        padding: '10px 0',\r\n        justifyContent: 'space-between',\r\n        '& #candidateElected': {\r\n            display: 'flex', \r\n            alignItems: 'center',\r\n            justifyContent: 'flex-end',\r\n            fontSize: props=>props.screensize < 700 ? 12 : 14,\r\n        }\r\n    },\r\n    votesDiv: {\r\n        textAlign: 'right',\r\n        '& #votesPercent': {\r\n            fontSize: props=>props.screensize < 700 ? 16 : 22,\r\n            fontWeight: 'bolder'\r\n        },\r\n        '& #votesTotal': {\r\n            fontSize: props=>props.screensize < 700 ? 12 : 14,\r\n            fontWeight: 'lighter'\r\n        }\r\n    }\r\n}))\r\n\r\nconst Candidate = (props) => {\r\n    const {candidate, color} = props\r\n    const [prevCandidate, setCandidate] = useState('')\r\n    const imgRef = useRef(null)\r\n\r\n    useEffect(()=> {\r\n        setCandidate(candidate.name)\r\n\r\n        if (props.candidate) {\r\n\r\n            if (prevCandidate === imgRef.current.name) {\r\n                imgRef.current.style.width = '100%'\r\n            } else {\r\n                imgRef.current.style.width = 0\r\n                setTimeout(()=>{\r\n                    imgRef.current.style.width = '100%'\r\n                }, 1000)\r\n\r\n            }\r\n        }\r\n    }, [props.candidate])\r\n    \r\n    const classes = styles(props);\r\n    var candidateName = candidate.name.split(' ')\r\n    var lastName = candidateName.pop();\r\n    \r\n    return (\r\n        <div className={classes.candidateRoot}>\r\n            <div style={{backgroundColor: props.color}} className={classes.imageDiv}>\r\n                <img ref={imgRef} alt=\"Candidate Headshot\" name={candidate.name} onLoad={e=>e.target.style.width = \"100%\"} onError={(e) => { e.target.onError = null; e.target.src =`/img/no_headshot.png`}} src={`/image/${candidate.cachedHeadFilename}`}/>\r\n                <div id=\"partyCode\" style={{fontWeight: 'bolder',color: props.color === '#C0C0C0' ? 'black' : 'white' }}>{candidate.partyCode}</div>\r\n            </div>\r\n            <div className={classes.candidateLeftDiv}>\r\n                <div className={classes.candidateName}>\r\n                    <div id=\"candidateFirst\">{candidate.firstName}</div>\r\n                    <div id=\"candidateLast\" >{candidate.lastName}</div>\r\n                </div>\r\n                <div id=\"candidateIncumbent\">{candidate.isIncumbent && 'Incumbent'}</div>\r\n            </div>\r\n            <div className={classes.candidateRightDiv}>\r\n                <div className={classes.votesDiv}>\r\n                    <div id='votesPercent'>{candidate.percent}%</div>\r\n                    <div id='votesTotal'>{candidate.votes.toLocaleString('en')} total votes</div>\r\n                </div>\r\n                {candidate.isElected ? <div id=\"candidateElected\">\r\n                    <CheckCircleIcon style={{paddingRight: 5, fontSize: 14, color: 'green'}} /> Elected\r\n                </div>\r\n                :\r\n                <div style={{fontSize: 14}}/>\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst Results = (props) => {\r\n    \r\n    const classes = styles();\r\n    const {data} = props;\r\n\r\n    useEffect(() => {\r\n        console.log('results render')\r\n    }, [props.data])\r\n\r\n    const getPartyColor = (candidate) => {\r\n        // console.log(candidate)\r\n        let color = '#C0C0C0' \r\n        if (candidate.partyCode === \"NDP\") {\r\n            return 'rgb(221, 102, 0)'\r\n        }\r\n        if (props.parties) {\r\n            let findParty = props.parties.find(party=>party.nameShort === candidate.partyCode)\r\n            if (findParty) {\r\n                color = findParty.color\r\n            }\r\n        }\r\n        return color\r\n\r\n    }\r\n\r\n    return (\r\n        <div className={classes.resultsRoot}>\r\n            {props.data && \r\n        <>\r\n            <div className={classes.resultsInfo}>\r\n                <div id=\"pollsReported\">{data.pollsReported}/{data.pollsTotal} polls reported</div>\r\n                <div id=\"totalVotes\">{data.votes.toLocaleString('en')} total votes</div>\r\n            </div>\r\n                <div>\r\n                    {props.data.results.map((candidate, i)=> {\r\n                        let partyColor = getPartyColor(candidate);\r\n                        return <Candidate screensize={props.screensize} key={i} color={partyColor} candidate={candidate}/>\r\n                    })}\r\n                </div>    \r\n            </>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Results","import React, {useState, useEffect} from 'react'\r\n\r\nimport {makeStyles} from '@material-ui/core';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\n\r\nimport {CSSTransition} from 'react-transition-group'\r\n\r\nimport Results from './Results'\r\n\r\nconst styles = makeStyles({\r\n    sidebar: {\r\n        flex: 2, \r\n        minWidth: 260,\r\n        position: 'relative',\r\n        display: 'flex',\r\n        overflow: 'hidden'\r\n    },\r\n    title: {\r\n        width: '100%',\r\n        top: 0,\r\n        backgroundColor: 'darkgrey',\r\n        color: 'white',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        minHeight: 50,\r\n        paddingLeft: 10,\r\n        fontWeight: 'bolder',\r\n    },\r\n    content: {\r\n        marginBottom: 10,\r\n        height: 'calc(100% - 50px)',\r\n        overflowX: 'hidden',\r\n        overflowY: 'scroll'\r\n\r\n    },\r\n    LocationButton: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        minHeight: 50,\r\n        paddingLeft: 10,\r\n        justifyContent: 'space-between',\r\n        '&:hover': {\r\n            backgroundColor: 'lightgrey',\r\n            cursor: 'pointer'\r\n        }\r\n    }\r\n})\r\n\r\nconst Sidebar = (props) =>  {\r\n    const [arrow, toggleArrow] = useState(0)\r\n    const classes=styles();\r\n    const [menu, setMenu] = useState('location')\r\n    const [results, setResults] = useState(null)\r\n\r\n    useEffect(()=>{\r\n        if (props.results) {\r\n            setResults(props.results)\r\n            setMenu('results')\r\n        } else {\r\n            console.log('no results')\r\n            setResults(null)\r\n            setMenu('location')\r\n        }\r\n    },[props.results, props.data])\r\n\r\n\r\n    const handleSelectRiding = (results) => {\r\n        props.handleSelectRiding(results);\r\n        setResults(results); \r\n        setMenu('results')\r\n    }   \r\n\r\n    const LocationButton = (props) => {\r\n        return (\r\n            <div\r\n                className={`${classes.LocationButton} menu-item`}\r\n                onMouseEnter={()=>toggleArrow(props.resultId)}\r\n                onMouseLeave={()=>toggleArrow(0)}\r\n                onClick={()=>handleSelectRiding(props.resultData)}\r\n            >\r\n                {props.children}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const handleBack = () => {\r\n        setMenu('location')\r\n        props.handleSelectRiding(null)\r\n    }\r\n\r\n\r\n    return (\r\n        <div id=\"widgetSidebar\" className={classes.sidebar}>\r\n            <div style={{position: 'absolute', top: 0, height: '50px', width: '100%', backgroundColor: 'darkgrey'}}/>\r\n            <CSSTransition \r\n                in={menu===\"location\"} \r\n                timeout={500}\r\n                unmountOnExit\r\n                classNames=\"menu-primary\"\r\n            >\r\n                <div className=\"menu\">\r\n                    <div className={classes.title}>\r\n                        SELECT A RIDING\r\n                    </div>\r\n                    <div className={classes.content}>\r\n                    {\r\n                        props.data && props.data.data.sort((a,b)=>{\r\n                            if (a.name > b.name) {\r\n                                return 1\r\n                            } else return -1\r\n                        })\r\n                        .map((result)=> {\r\n                            return (\r\n                                <LocationButton key={result.id} resultId={result.id} resultData={result} >{result.name}{arrow === result.id && <ChevronRightIcon/>}</LocationButton>\r\n                            )\r\n                        })\r\n                    }\r\n                </div>\r\n                </div>\r\n            </CSSTransition>\r\n            <CSSTransition \r\n                in={menu===\"results\"} \r\n                unmountOnExit\r\n                timeout={500}\r\n                classNames=\"menu-secondary\"\r\n            >\r\n                <div className=\"menu\">\r\n                    <div className={classes.title}>\r\n                        <ChevronLeftIcon onClick={handleBack} style={{cursor: 'pointer'}}/><div style={{paddingRight: '15px'}}>{results && results.name.toUpperCase()}</div>\r\n                    </div>\r\n                    <div className={classes.content}>\r\n                        {props.data && menu === 'results' && \r\n                            <Results \r\n                                screensize={props.small}\r\n                                data={results}\r\n                                parties={props.parties}\r\n                            />\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </CSSTransition>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Sidebar","import React from 'react'\r\n\r\nconst LoadingAnimation = () => {\r\n    return (\r\n        <div className=\"spinnerDiv\">\r\n            <div className=\"spinnerText\">Loading Map..</div>\r\n            <div className=\"spinner\">\r\n                <div className=\"double-bounce1\"></div>\r\n                <div className=\"double-bounce2\"></div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default LoadingAnimation","import React from 'react';\r\nimport {makeStyles} from '@material-ui/core'\r\n\r\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        backgroundColor: props=>props.color,\r\n        color: 'white', \r\n        fontSize: 18,\r\n        fontWeight: 'bold',\r\n        padding: 5,\r\n        justifyContent: \"center\",\r\n        display: 'flex', \r\n        alignSelf: 'center',\r\n        width: '100%',\r\n        '& svg': {\r\n            paddingRight: 5\r\n        }\r\n    }\r\n})\r\n\r\nconst Declaration = (props) => {\r\n    const classes = useStyles(props)\r\n    return <div className={classes.root}>\r\n        <CheckCircleIcon />\r\n        {props.declarationText}\r\n    </div>\r\n}\r\n\r\nexport default Declaration\r\n\r\n","import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport {makeStyles} from '@material-ui/core'\nimport axios from 'axios'\n\n\n// import { TransformWrapper, TransformComponent } from \"react-zoom-pan-pinch\";\n\n// import Map from './components/Map.js'\nimport MapDiv from './components/MapTest'\nimport Sidebar from './components/Sidebar.js'\nimport LoadingAnimation from './components/LoadingAnimation'\n// import Pictureloader from './components/Pictureloader'\nimport Declaration from './components/Declaration'\n\nconst styles = makeStyles({\n  app: {\n    height: '100%',\n    display: 'flex',\n    flexDirection: 'row',\n    \n  }, \n  left: {\n    flex: 4,\n    position: 'relative',\n    display: 'flex',\n    flexDirection: \"column\"\n  }\n})\n\nfunction App() {\n\n  const [data, setData] = useState(null)\n  const [loading, toggleLoading] = useState(true)\n  const [parties, setParties] = useState(null)\n  const [selectedResults, setSelectedResults] = useState(null)\n  const [timer, setTimer] = useState(10000)\n  const [screensize, setScreenSize] = useState(window.innerWidth)\n  const [declarationText, setDeclarationText] = useState('')\n\tconst [declaration, setDeclaration] = useState(null)\n  const [declaredColor, setDeclaredColor] = useState('')\n\n  const classes = styles();\n\n  useEffect(()=>{\n    console.log(`Updating every ${timer/1000} seconds`)\n    getData()\n    startTimer()\n  },[])\n\n  useEffect(()=> {\n    getResultsFromURL()\n  }, [loading])\n\n  const startTimer = () => {\n      setInterval(()=>{\n          getData();\n      }, timer);\n    }\n\n  useEffect(()=> {\n    updateResults()\n  }, [data])\n\n  useEffect(()=>{\n\t\ttry {\n\t\t\tif (data && declaration) {\n\t\t\t\tif (declaration.overallResult.partyName && declaration.overallResult.resultText) {\n\t\t\t\t\tlet text = declaration.overallResult.partyName + ' ' + declaration.overallResult.resultText;\n          setDeclarationText(text)\n          let partyWinner = parties.find(party=>party.name === declaration.overallResult.partyName)\n          setDeclaredColor(partyWinner.color)     \n\t\t\t\t} else \n        setDeclarationText('')\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t\n\t\t}\n\n    },[data, parties, declaration])\n\n  const getData = () => {\n    console.log(\"fetching\")\n    axios.get('/fullresults')\n      .then(res=>{\n        if (res.status === 200) {\n          setData(res.data);\n          toggleLoading(false);\n        }\n      })\n      .catch(err=>console.log(\"Error fetching FULLELECTIONDATA, check your env variables and try again\", err))\n    \n    axios.get('/overallresults')\n      .then(res=>{\n        if (res.status === 200) {\n          setParties(res.data.partyResults)\n        }\n      })\n      .catch(err=>console.log(\"Error fetching OVERALLRESULTS, check your env variables and try again\"))\n    axios.get(`/declaration`)\n      .then(function (res) {\n        if (res.status === 200) {\n          setDeclaration(res.data)\n        } \n      })\n      .catch(err=>{\n        console.log(\"Error fetching results\")\n      })\n  }\n\n  const getResultsFromURL = () => {\n    try {\n      let hash = window.location.hash\n      if (hash) {\n        hash = decodeURI(hash.replace('#', ''))\n        let name = hash\n        if (data) {\n          const result = data.data.find(riding=>{\n            return riding.name.toLowerCase() === name.toLowerCase() \n          })\n          if (result) {\n            setSelectedResults(result)\n          }\n        }\n      }\n  \n    } catch (err) {\n      console.log('could not find riding by hash')\n    }\n\n  }\n\n  const updateResults = () => {\n    if (selectedResults) {\n      console.log('updating selected')\n\n      let initResults = selectedResults.name;\n      let newResults = data.data.find(riding=> riding.name === initResults)\n      // console.log(initResults, newResults)\n      if (initResults === newResults.name) {\n        setSelectedResults(newResults)\n      }\n    }\n  }\n\n  const handleSelectRiding = (results) => {\n    setSelectedResults(results)\n  }\n\n  const getColorByName = () => {\n    let partyWinner = parties.find(party=>party.name === declaration.overallResult.partyName)\n    console.log('winner', partyWinner)\n    return 'red'\n  }\n\n  return (\n    <div id={'map-widget-app'} className={classes.app}>\n      <div className={classes.left}>\n        {declarationText && <Declaration color={declaredColor} declarationText={declarationText}/>}\n      {!loading  ? <MapDiv \n        data={data}\n        parties={parties}\n        handleSelectRiding={handleSelectRiding}\n        selectedRiding={selectedResults}\n        />\n        :\n        <LoadingAnimation/>\n      }\n      </div>\n        <Sidebar \n          data={data} \n          parties={parties}\n          results={selectedResults} \n          handleSelectRiding={handleSelectRiding}\n          small={screensize}\n          />\n        {/* {!loading && <Pictureloader data={data}/>} */}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}