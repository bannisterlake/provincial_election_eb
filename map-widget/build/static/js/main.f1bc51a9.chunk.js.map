{"version":3,"sources":["components/Map.js","components/MapTest.js","components/Sidebar.js","App.js","serviceWorker.js","index.js"],"names":["makeStyles","map","display","height","flex","styles","mapContainer","position","resetButton","boxShadow","width","fontSize","alignItems","justifyContent","borderRadius","background","cursor","color","MapTest","props","useState","lat","lng","zoom","initBounds","setInitBounds","geo","setgeo","mapRef","useRef","geoRef","classes","useEffect","console","log","fetch","then","res","json","bounds","L","geoJSON","getBounds","current","leafletElement","fitBounds","handleFill","data","feature","partyResults","EDName","find","ed","name","toUpperCase","getPartyResults","properties","Constituen","fill","results","parties","party","votes","nameShort","partyCode","colour","getFillByResults","fillColor","weight","fillOpacity","className","ref","maxBounds","minZoom","TileLayer","attribution","url","GeoJSON","style","onClick","e","target","layerBounds","layer","Marker","Popup","sidebar","overflow","title","top","backgroundColor","paddingLeft","locationButtonContainer","LocationButton","Sidebar","arrow","children","result","app","flexDirection","App","setData","toggleLoading","setParties","getData","id","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f1bc51a9.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\n\r\nimport {makeStyles} from '@material-ui/core'\r\n\r\nimport {\r\n    ComposableMap,\r\n    Geographies,\r\n    Geography,\r\n    ZoomableGroup\r\n  } from \"react-simple-maps\";\r\n\r\nimport { TransformWrapper, TransformComponent } from \"react-zoom-pan-pinch\";\r\n\r\nconst styles = makeStyles({\r\n    map: {\r\n        display: 'flex',\r\n        height: '100%',\r\n        flex: 3,\r\n    }\r\n});\r\n\r\nconst Map = (props) => {\r\n\r\n    const [zoomCenter, setZoomCenter] = useState({zoom: 1500, center: [-105, 54.5]})\r\n    const classes = styles()\r\n\r\n\r\n    const getFill =(geo) => {\r\n        if (!geo.ConCode) {\r\n            if (geo.name === 'United States of America') {\r\n                return 'lightgrey'\r\n            }\r\n            return 'darkgrey'\r\n        }\r\n        else return 'slategrey'\r\n    }\r\n\r\n    return (\r\n        <div className={classes.map} >\r\n            <TransformComponent>\r\n            <ComposableMap style={{width: '100%', overflow: 'visible', height: '100%'}} projection=\"geoMercator\" projectionConfig={{center: zoomCenter.center, scale: zoomCenter.zoom}}>\r\n                    <Geographies geography={'/SASK_Union_proj_lakes.json'}>\r\n                        {({geographies})=>\r\n                            geographies.map((geo, i)=>{\r\n                                const fill = getFill(geo.properties)\r\n                                return <Geography \r\n                                    key={i}\r\n                                    geography={geo}\r\n                                    fill={fill}\r\n                                    style={{\r\n                                        default: {\r\n                                            outline: 'none'\r\n                                        },\r\n                                        pressed: {\r\n                                            outline: 'none'\r\n                                        },\r\n                                        hover: {\r\n                                            outline: 'none',\r\n                                            opacity: '0.9'\r\n                                        }\r\n                                    }}\r\n                                />\r\n                            })\r\n                        }\r\n                    </Geographies>\r\n            </ComposableMap>\r\n            </TransformComponent>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Map;","import React, { useState, useEffect, useRef } from 'react'\r\nimport { Map, MapControl, TileLayer, GeoJSON, Marker, Popup } from 'react-leaflet'\r\nimport Control from 'react-leaflet-control'\r\nimport L from 'leaflet'\r\n\r\nimport ZoomOutMapIcon from '@material-ui/icons/ZoomOutMap';\r\n\r\nimport {makeStyles} from '@material-ui/core'\r\n\r\nconst styles= makeStyles({\r\n    mapContainer: {\r\n        flex: 3,\r\n        position: 'relative'\r\n    },\r\n    resetButton: {\r\n        display: 'flex',\r\n        boxShadow: '0 1px 4px rgba(0,0,0,0.65)',\r\n        height: 26,\r\n        width: 26,\r\n        fontSize: 14,\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        borderRadius: '4px',\r\n        background: '#FFFFFF',\r\n        cursor: 'pointer',\r\n        color: 'black'\r\n        \r\n    }\r\n})\r\n\r\n\r\n const MapTest = (props) => {\r\n    const [position, setPosition] = useState({lat: 54, lng: -105, zoom: 5});\r\n    const [initBounds, setInitBounds] = useState();\r\n    const [geo, setgeo] = useState(null);\r\n    const mapRef = useRef(null);\r\n    const geoRef = useRef(null)\r\n\r\n    const classes = styles();\r\n\r\n    useEffect(()=> {\r\n        if(!mapRef) {return}\r\n        \r\n        else {\r\n            console.log('here')\r\n            fetch('/SASK_Constituency_boundary.json')\r\n                .then(res=>res.json())\r\n                .then(json=>{\r\n                    setgeo(json)\r\n                    var bounds = L.geoJSON(json).getBounds()\r\n                    setInitBounds(bounds)\r\n                    mapRef.current.leafletElement.fitBounds(bounds)\r\n                    console.log(L.geoJSON(json))\r\n                })\r\n        }   \r\n    }, [])\r\n\r\n    useEffect(()=>{\r\n        handleFill();\r\n    }, [props.data])\r\n\r\n    const getPartyResults = (EDName) => {\r\n        if (props.data) {\r\n            let partyResults = props.data.data.find(ed=>\r\n                ed.name.toUpperCase() === EDName.toUpperCase()\r\n            )\r\n            return partyResults\r\n        }\r\n    }\r\n    \r\n    const getFillByResults = (results) =>{\r\n        if(props.parties) {\r\n            let fill = props.parties.data.find(party=>{\r\n                if (results.results[0].votes > 0) {   \r\n                    return party.nameShort === results.results[0].partyCode\r\n                }\r\n            })\r\n            if (fill) {\r\n                return fill.colour\r\n            } else {\r\n                return 'lightgrey'\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    const handleFill = (feature) => {\r\n        if (feature) {\r\n\r\n            let partyResults = getPartyResults(feature.properties.Constituen);\r\n\r\n            let fill = 'lightgrey'\r\n            if (partyResults) {\r\n                fill = getFillByResults(partyResults)\r\n            }\r\n\r\n            return {\r\n                fillColor: fill,\r\n                weight: 0.9,\r\n                color: 'black',\r\n                fillOpacity: 0.8\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleClick = (e) => {\r\n        var bounds = e.target.getBounds();\r\n        var layerBounds = e.layer.getBounds();\r\n        const map = mapRef.current.leafletElement;\r\n        map.fitBounds(layerBounds)\r\n    }\r\n\r\n    const zoomToED = () => {\r\n        const map = mapRef.current.leafletElement;\r\n        const geo = geoRef.current.leafletElement;\r\n        const test = \"LAST MOUNTAIN-TOUCHWOOD\"\r\n        var findLayer = null;\r\n        geo.eachLayer(layer=>{\r\n            if (layer.feature.properties.Constituen === test.toUpperCase()) {\r\n                findLayer = layer\r\n            }\r\n        })\r\n        map.fitBounds(findLayer.getBounds())\r\n    }\r\n\r\n    const resetBounds = () => {\r\n        const map = mapRef.current.leafletElement\r\n        map.fitBounds(initBounds)\r\n    }\r\n\r\n    return (\r\n        <div className={classes.mapContainer}>\r\n            <Map \r\n                ref={mapRef} \r\n                maxBounds={[[29.305561325527698, -130.53515625000003], [74.16408546675687, -90.54296875000001]]}\r\n                minZoom={5}    \r\n            >\r\n                <TileLayer\r\n                attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                url=\"https://{s}.basemaps.cartocdn.com/light_nolabels/{z}/{x}/{y}.png\"\r\n                />\r\n\r\n                {geo && <GeoJSON ref={geoRef} style={handleFill} data={geo} onClick={handleClick} />  }   \r\n\r\n                <Marker position={position}>\r\n                    <Popup>\r\n                        A pretty CSS3 popup. <br /> Easily customizable.\r\n                    </Popup>\r\n                </Marker>\r\n                <Control position=\"topleft\">\r\n                    <a className={`leaflet-control-zoom ${classes.resetButton}`} onClick={resetBounds}>\r\n                        <ZoomOutMapIcon />\r\n\r\n                    </a>\r\n                </Control>\r\n                {/* <MapControl position={'topleft'}/> */}\r\n            </Map>\r\n\r\n            {/* <a className={`leaflet-control-zoom ${classes.resetButton}`} title=\"Reset\" role=\"button\" onClick={resetBounds}><ZoomOutMapIcon/></a> */}\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default MapTest;","import React, {useState} from 'react'\r\n\r\nimport {makeStyles} from '@material-ui/core';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\n\r\nimport {CSSTransition} from 'react-transition-group'\r\n\r\n\r\n\r\nconst styles = makeStyles({\r\n    sidebar: {\r\n        flex: 1, \r\n        position: 'relative',\r\n        overflow: 'auto',\r\n    },\r\n    title: {\r\n        position: 'sticky', \r\n        top: 0,\r\n        backgroundColor: 'darkgrey',\r\n        color: 'white',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        height: 50,\r\n        paddingLeft: 10\r\n\r\n        // textAlign: 'center',\r\n        // verticalAlign: 'middle'\r\n    },\r\n    locationButtonContainer: {\r\n    },\r\n    LocationButton: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        height: 50,\r\n        paddingLeft: 10,\r\n        justifyContent: 'space-between',\r\n        '&:hover': {\r\n            backgroundColor: 'lightgrey',\r\n            cursor: 'pointer'\r\n        }\r\n    }\r\n})\r\n\r\nconst Sidebar = (props) =>  {\r\n    const [title, setTitle] = useState('Select a province or territory');\r\n    const [arrow, toggleArrow] = useState(false)\r\n    const classes=styles();\r\n\r\n    const LocationButton = (props) => {\r\n        return (\r\n            <div\r\n                className={classes.LocationButton}\r\n            >\r\n                {props.children}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className={classes.sidebar}>\r\n            <div className={classes.title}>{title}</div>\r\n            {props.data && props.data.data.map(result=> {\r\n                console.log(result);\r\n                return <LocationButton>{result.name}{arrow && <ChevronRightIcon/>}</LocationButton>\r\n            })}\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Sidebar","import React, {useState, useEffect} from 'react';\nimport './App.css';\n\nimport {makeStyles} from '@material-ui/core'\n\nimport { TransformWrapper, TransformComponent } from \"react-zoom-pan-pinch\";\n\nimport Map from './components/Map.js'\nimport MapDiv from './components/MapTest'\nimport Sidebar from './components/Sidebar.js'\n\n\n\nconst styles = makeStyles({\n  app: {\n    height: '100%',\n    display: 'flex',\n    flexDirection: 'row',\n  }\n})\n\nfunction App() {\n\n  const [data, setData] = useState(null)\n  const [loading, toggleLoading] = useState(true)\n  const [parties, setParties] = useState(null)\n\n  const classes = styles();\n\n  useEffect(()=>\n    getData()\n  ,[])\n\n  const getData = () => {\n    fetch('/data/SASK_2016.json')\n      .then(res=>res.json())\n      .then(json=>{\n        setData(json);\n        toggleLoading(false)\n      })\n    fetch('/data/partylist.json')\n      .then(res=>res.json())\n      .then(json=>{\n        setParties(json)\n      })\n  }\n\n  return (\n    <div id={'map-widget-app'} className={classes.app}>\n      <MapDiv \n        data={data}\n        parties={parties}\n        />\n        {/* <TransformWrapper\n          options={{\n            limitToBounds: false,\n            maxScale: 1000,\n          }}\n        >\n          <Map />\n        </TransformWrapper> */}\n        <Sidebar data={data} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}