{"version":3,"sources":["components/Tooltip.js","components/MapTest.js","components/Results.js","components/Sidebar.js","components/LoadingAnimation.js","App.js","serviceWorker.js","index.js"],"names":["styles","makeStyles","geoTooltip","fontFamily","display","flexDirection","transition","tooltipName","fontSize","fontWeight","tooltipPolls","color","paddingBottom","tooltipWinner","backgroundColor","props","padding","Tooltip","classes","className","results","name","pollsReported","pollsTotal","style","id","partyCode","mapContainer","flex","position","resetButton","boxShadow","height","width","alignItems","justifyContent","borderRadius","background","cursor","MapTest","useState","initBounds","setInitBounds","currentBounds","setCurrentBounds","geo","setgeo","mapRef","useRef","geoRef","useEffect","fetch","then","res","json","bounds","L","geoJSON","getBounds","current","leafletElement","fitBounds","selectedRiding","zoomToED","getPartyResults","EDName","data","find","ed","toUpperCase","e","console","log","getFillByResults","parties","fill","party","votes","nameShort","colour","ridingName","map","findLayer","eachLayer","layer","feature","properties","Constituen","highlightFeature","target","setStyle","weight","fillOpacity","Browser","ie","opera","edge","bringToFront","resetFeature","resetStyle","Map","ref","maxBounds","minZoom","TileLayer","attribution","url","GeoJSON","partyResults","fillColor","onClick","layerBounds","closeTooltip","clickedRiding","handleSelectRiding","onEachFeature","on","mouseover","mouseout","featureData","featureColor","bindTooltip","ReactDOMServer","renderToString","sticky","direction","resultsRoot","candidateRoot","resultsInfo","imageDiv","bottom","textAlign","candidateLeftDiv","candidateName","candidateRightDiv","justifySelf","votesDiv","Candidate","candidate","alt","src","split","length","isIncumbent","percent","toLocaleString","elected","paddingRight","Results","i","partyColor","findParty","getPartyColor","key","sidebar","overflow","title","top","paddingLeft","content","marginBottom","overflowX","overflowY","LocationButton","Sidebar","arrow","toggleArrow","menu","setMenu","setResults","onMouseEnter","resultId","onMouseLeave","resultData","children","CSSTransition","in","timeout","unmountOnExit","classNames","result","LoadingAnimation","app","App","setData","loading","toggleLoading","setParties","selectedResults","setSelectedResults","getData","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f54aa8b6.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nimport {makeStyles} from '@material-ui/core'\r\n\r\nconst styles = makeStyles({\r\n    geoTooltip: {\r\n        fontFamily: 'Roboto, Ubuntu, Helvetica',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        transition: '1s'\r\n    },\r\n    tooltipName: {\r\n        fontSize: 20,\r\n\r\n        fontWeight: 'bolder',\r\n    },\r\n    tooltipPolls: {\r\n        fontSize: 14,\r\n        color: 'grey',\r\n        paddingBottom: 10\r\n    },\r\n    tooltipWinner:{\r\n        backgroundColor: props=>props.color,\r\n        color: 'white',\r\n        padding: 5, \r\n        '& #tooltipPartyCode': {\r\n            fontSize: 18\r\n        },\r\n        '& #tooltipWinnerName': {\r\n            fontSize: 20,\r\n            fontWeight: 'bolder'\r\n        }\r\n    }\r\n})\r\n\r\n\r\nconst Tooltip = (props) => {\r\n\r\n    const classes = styles(props)\r\n\r\n    return (\r\n        <div className={classes.geoTooltip}>\r\n            <div className={classes.tooltipName}>{props.results.name}</div>\r\n            <div className={classes.tooltipPolls}>{props.results.pollsReported}/{props.results.pollsTotal} polls reported</div>\r\n            {props.results.pollsReported > 0 && \r\n            <div className={classes.tooltipWinner} style={{backgroundColor: props.color}}>\r\n                <div id=\"tooltipPartycode\">{props.results.results[0].partyCode}</div>\r\n                <div id=\"tooltipWinnerName\">{props.results.results[0].name}</div>\r\n            </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Tooltip","import React, { useState, useEffect, useRef } from 'react'\r\nimport ReactDOMServer from 'react-dom/server'\r\nimport { Map, TileLayer, GeoJSON } from 'react-leaflet'\r\nimport Control from 'react-leaflet-control'\r\nimport L from 'leaflet'\r\n\r\nimport ZoomOutMapIcon from '@material-ui/icons/ZoomOutMap';\r\n\r\nimport {makeStyles} from '@material-ui/core'\r\n\r\nimport Tooltip from './Tooltip'\r\n\r\nconst styles= makeStyles({\r\n    mapContainer: {\r\n        flex: 4,\r\n        position: 'relative'\r\n    },\r\n    resetButton: {\r\n        display: 'flex',\r\n        boxShadow: '0 1px 4px rgba(0,0,0,0.65)',\r\n        height: 26,\r\n        width: 26,\r\n        fontSize: 14,\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        borderRadius: '4px',\r\n        background: '#FFFFFF',\r\n        cursor: 'pointer',\r\n        color: 'black'\r\n        \r\n    }\r\n})\r\n\r\n\r\n const MapTest = (props) => {\r\n    // const [position, setPosition] = useState({lat: 54, lng: -105, zoom: 5});\r\n    const [initBounds, setInitBounds] = useState();\r\n    const [currentBounds, setCurrentBounds] = useState();\r\n    const [geo, setgeo] = useState(null);\r\n    const mapRef = useRef(null);\r\n    const geoRef = useRef(null)\r\n\r\n    const classes = styles();\r\n\r\n    useEffect(()=> {\r\n        if(!mapRef) {return}\r\n        \r\n        else {\r\n            fetch('/SASK_Constituency_boundary.json')\r\n                .then(res=>res.json())\r\n                .then(json=>{\r\n                    setgeo(json)\r\n                    var bounds = L.geoJSON(json).getBounds()\r\n                    setInitBounds(bounds)\r\n                    mapRef.current.leafletElement.fitBounds(bounds)\r\n                })\r\n        }   \r\n    }, [])\r\n\r\n    // useEffect(()=>{\r\n    //     handleFill();\r\n    // }, [props.data])\r\n\r\n    useEffect(()=> {\r\n        if (props.selectedRiding) {\r\n            zoomToED(props.selectedRiding.name)\r\n        }\r\n    }, [props.selectedRiding])\r\n\r\n    const getPartyResults = (EDName) => {\r\n        try {\r\n            if (props.data) {\r\n                let partyResults = props.data.data.find(ed=>\r\n                    ed.name.toUpperCase() === EDName.toUpperCase()\r\n                )\r\n                return partyResults\r\n            }\r\n        } catch (e) {\r\n            console.log(\"Couldn't get party results\")\r\n        }\r\n    }\r\n    \r\n    const getFillByResults = (results) =>{\r\n        if(props.parties) {\r\n            let fill = props.parties.data.find(party=>{\r\n                if (results.results[0].votes > 0) {   \r\n                    return party.nameShort === results.results[0].partyCode\r\n                }\r\n            })\r\n            if (fill) {\r\n                return fill.colour\r\n            } else {\r\n                return 'lightgrey'\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    const handleFill = (feature) => {\r\n        if (feature) {\r\n            let partyResults = getPartyResults(feature.properties.Constituen);\r\n            let fill = 'lightgrey'\r\n            if (partyResults) {\r\n                fill = getFillByResults(partyResults)\r\n            }\r\n            return {\r\n                fillColor: fill,\r\n                weight: 0.9,\r\n                color: 'black',\r\n                fillOpacity: 0.9\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleClick = (e) => {\r\n        // var mapbounds = e.target.getBounds();\r\n        var layerBounds = e.layer.getBounds();\r\n\r\n        if (currentBounds === layerBounds) {\r\n            e.layer.closeTooltip()\r\n        } else {\r\n            const map = mapRef.current.leafletElement;\r\n            setCurrentBounds(layerBounds)\r\n            map.fitBounds(layerBounds)\r\n            const clickedRiding = e.layer.feature.properties.Constituen\r\n            const partyResults = getPartyResults(clickedRiding)\r\n            props.handleSelectRiding(partyResults)\r\n            e.layer.setStyle({\r\n                weight: 2,\r\n                color: 'black',\r\n                fillOpacity: 1\r\n            })\r\n        }\r\n    }\r\n\r\n    const zoomToED = (ridingName) => {\r\n        const map = mapRef.current.leafletElement;\r\n        const geo = geoRef.current.leafletElement;\r\n        var findLayer = null;\r\n        geo.eachLayer(layer=>{\r\n            if (layer.feature.properties.Constituen === ridingName.toUpperCase()) {\r\n                findLayer = layer\r\n            }\r\n        })\r\n\r\n       \r\n\r\n        map.fitBounds(findLayer.getBounds())\r\n    }\r\n\r\n    const resetBounds = () => {\r\n        const map = mapRef.current.leafletElement\r\n        map.fitBounds(initBounds)\r\n    }\r\n\r\n    function highlightFeature(e) {\r\n        var layer = e.target;\r\n    \r\n        layer.setStyle({\r\n            weight: 2,\r\n            color: 'black',\r\n            fillOpacity: 1\r\n            // dashArray: '',\r\n            // filter: 'brightness(50%)'\r\n        });\r\n    \r\n        if (!L.Browser.ie && !L.Browser.opera && !L.Browser.edge) {\r\n            layer.bringToFront();\r\n        }\r\n    }\r\n\r\n    function resetFeature(e) {\r\n        let geojson = geoRef.current.leafletElement\r\n        geojson.resetStyle(e.target);\r\n    }\r\n\r\n    const getTooltipData = (feature, layer) => {\r\n        if (feature.properties ) {\r\n            layer.on({\r\n                mouseover: highlightFeature,\r\n                mouseout: resetFeature,\r\n            })\r\n        \r\n            const featureData = getPartyResults(feature.properties.Constituen)\r\n            const featureColor = getFillByResults(featureData)\r\n            if (featureData && featureColor) {\r\n                layer.bindTooltip(ReactDOMServer.renderToString(<Tooltip results={featureData} color={featureColor} />), {sticky: false, direction: 'top'})\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={classes.mapContainer}>\r\n            <Map \r\n                ref={mapRef} \r\n                maxBounds={[[29.305561325527698, -130.53515625000003], [74.16408546675687, -90.54296875000001]]}\r\n                minZoom={3}    \r\n            >\r\n                <TileLayer\r\n                attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                url=\"https://{s}.basemaps.cartocdn.com/light_nolabels/{z}/{x}/{y}.png\"\r\n                />\r\n\r\n                {geo && \r\n                <GeoJSON \r\n                    ref={geoRef} \r\n                    style={handleFill} \r\n                    data={geo} \r\n                    onClick={handleClick} \r\n                    onEachFeature={getTooltipData}\r\n                />  \r\n                }   \r\n                <Control position=\"topleft\">\r\n                    <a id=\"zoomOut\" style={{color: 'black !important'}} className={`leaflet-control-zoom leaflet-bar ${classes.resetButton}`} onClick={resetBounds}>\r\n                        <ZoomOutMapIcon />\r\n\r\n                    </a>\r\n                </Control>\r\n            </Map>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default MapTest;","import React from 'react';\r\nimport {makeStyles} from '@material-ui/core'\r\n\r\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\r\n\r\nconst styles = makeStyles({\r\n    resultsRoot: {\r\n        padding: 10,\r\n      \r\n    },\r\n    candidateRoot: {\r\n        position: 'relative',\r\n        display: 'flex', \r\n        flexDirection: 'row',\r\n        height: 120,\r\n        padding: '10px 0'\r\n    },\r\n    resultsInfo: {\r\n        display: 'flex', \r\n        alignItems: 'center',\r\n        justifyContent: 'space-between',\r\n        '& #pollsReported': {\r\n            fontSize: 14,\r\n            fontWeight: 'bolder'\r\n        },\r\n        '& #totalVotes': {\r\n            fontSize: 12,\r\n            color: 'darkslategrey'\r\n        }\r\n    },\r\n    imageDiv: {\r\n        height: '100%',\r\n        position: 'relative',\r\n        paddingBottom: 25,\r\n        width: 70,\r\n        '& #partyCode': {\r\n            position: 'absolute', \r\n            bottom: 32,\r\n            color: 'white',\r\n            width: '100%',\r\n            textAlign: 'center'\r\n        },\r\n        '& img': {\r\n            borderRadius: '8px',\r\n            backgroundColor: 'red',\r\n            paddingBottom: 30,\r\n            width: '100%',\r\n            height: 'auto'\r\n        }\r\n    },\r\n    candidateLeftDiv: {\r\n        flex: 3, \r\n        display: 'flex', \r\n        flexDirection: 'column',\r\n        justifyContent: 'space-between',\r\n        padding: '10px 0 10px 10px',\r\n\r\n        '& #candidateIncumbent': {\r\n            fontSize: 13,\r\n            fontWeight: 'lighter'\r\n        }\r\n    },\r\n    candidateName: {\r\n        '& #candidateFirst': {\r\n            fontWeight: 'bolder',\r\n            fontSize: 14\r\n        },\r\n        '& #candidateLast': {\r\n            fontWeight: 'bolder',\r\n            fontSize: 22\r\n        }\r\n    }, \r\n    candidateRightDiv: {\r\n        flex: 2, \r\n        justifySelf: 'flex-end',\r\n        display: 'flex', \r\n        flexDirection: 'column',\r\n        padding: '10px 0',\r\n        justifyContent: 'space-between',\r\n        '& #candidateElected': {\r\n            display: 'flex', \r\n            alignItems: 'center',\r\n            justifyContent: 'flex-end',\r\n            fontSize: 14\r\n        }\r\n    },\r\n    votesDiv: {\r\n        textAlign: 'right',\r\n        '& #votesPercent': {\r\n            fontSize: 22,\r\n            fontWeight: 'bolder'\r\n        },\r\n        '& #votesTotal': {\r\n            fontSize: 14,\r\n            fontWeight: 'lighter'\r\n        }\r\n    }\r\n})\r\n\r\nconst Candidate = (props) => {\r\n    const {candidate, color} = props\r\n    const classes = styles();\r\n    return (\r\n        <div className={classes.candidateRoot}>\r\n            <div className={classes.imageDiv}>\r\n                <img style={{backgroundColor: color}} alt=\"Candidate Headshot\" src=\"/images.jpg\"/>\r\n                <div id=\"partyCode\">{candidate.partyCode}</div>\r\n            </div>\r\n            <div className={classes.candidateLeftDiv}>\r\n                <div className={classes.candidateName}>\r\n                    <div id=\"candidateFirst\">{candidate.name.split(' ')[0]}</div>\r\n                    <div id=\"candidateLast\" >{candidate.name.split(' ')[candidate.name.split(' ').length - 1]}</div>\r\n                </div>\r\n                <div id=\"candidateIncumbent\">{candidate.isIncumbent && 'Incumbent'}</div>\r\n            </div>\r\n            <div className={classes.candidateRightDiv}>\r\n                <div className={classes.votesDiv}>\r\n                    <div id='votesPercent'>{candidate.percent}%</div>\r\n                    <div id='votesTotal'>{candidate.votes.toLocaleString('en')} total votes</div>\r\n                </div>\r\n                {candidate.elected ? <div id=\"candidateElected\">\r\n                    <CheckCircleIcon style={{paddingRight: 5, fontSize: 14, color: 'green'}} /> Elected\r\n                </div>\r\n                :\r\n                <div style={{fontSize: 14}}/>\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst Results = (props) => {\r\n    \r\n    const classes = styles();\r\n    const {data} = props;\r\n\r\n    const getPartyColor = (candidate) => {\r\n        let color = \"#595b5b\" \r\n        if (props.parties.data) {\r\n            let findParty = props.parties.data.find(party=>party.nameShort === candidate.partyCode)\r\n            if (findParty) {\r\n                color = findParty.colour\r\n            }\r\n        }\r\n        return color\r\n\r\n    }\r\n\r\n    return (\r\n        <div className={classes.resultsRoot}>\r\n            {props.data && \r\n        <>\r\n            <div className={classes.resultsInfo}>\r\n                <div id=\"pollsReported\">{data.pollsReported}/{data.pollsTotal} polls reported</div>\r\n                <div id=\"totalVotes\">{data.votes.toLocaleString('en')} total votes</div>\r\n            </div>\r\n                <div>\r\n                    {props.data.results.map((candidate, i)=> {\r\n                        let partyColor = getPartyColor(candidate);\r\n                        return <Candidate key={i} color={partyColor} candidate={candidate}/>\r\n                    })}\r\n                </div>    \r\n            </>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Results","import React, {useState, useEffect} from 'react'\r\n\r\nimport {makeStyles} from '@material-ui/core';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\n\r\nimport {CSSTransition} from 'react-transition-group'\r\n\r\nimport Results from './Results'\r\n\r\nconst styles = makeStyles({\r\n    sidebar: {\r\n        flex: 2, \r\n        position: 'relative',\r\n        display: 'flex',\r\n        overflow: 'hidden'\r\n    },\r\n    title: {\r\n        width: '100%',\r\n        top: 0,\r\n        backgroundColor: 'darkgrey',\r\n        color: 'white',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        height: 50,\r\n        paddingLeft: 10,\r\n        fontWeight: 'bolder',\r\n        // textAlign: 'center',\r\n        // verticalAlign: 'middle'\r\n    },\r\n    content: {\r\n        marginBottom: 10,\r\n        height: 'calc(100% - 50px)',\r\n        overflowX: 'hidden',\r\n        overflowY: 'scroll'\r\n\r\n    },\r\n    LocationButton: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        height: 50,\r\n        paddingLeft: 10,\r\n        justifyContent: 'space-between',\r\n        '&:hover': {\r\n            backgroundColor: 'lightgrey',\r\n            cursor: 'pointer'\r\n        }\r\n    }\r\n})\r\n\r\nconst Sidebar = (props) =>  {\r\n    const [arrow, toggleArrow] = useState(0)\r\n    const classes=styles();\r\n    const [menu, setMenu] = useState('location')\r\n    const [results, setResults] = useState(null)\r\n\r\n    useEffect(()=>{\r\n        if (props.results) {\r\n            setResults(props.results)\r\n            setMenu('results')\r\n\r\n        }\r\n    },[props.results])\r\n\r\n\r\n    const handleSelectRiding = (results) => {\r\n        props.handleSelectRiding(results);\r\n        setResults(results); \r\n        setMenu('results')\r\n    }   \r\n\r\n    const LocationButton = (props) => {\r\n        return (\r\n            <div\r\n                className={`${classes.LocationButton} menu-item`}\r\n                onMouseEnter={()=>toggleArrow(props.resultId)}\r\n                onMouseLeave={()=>toggleArrow(0)}\r\n                onClick={()=>handleSelectRiding(props.resultData)}\r\n            >\r\n                {props.children}\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n    return (\r\n        <div id=\"widgetSidebar\" className={classes.sidebar}>\r\n            <div style={{position: 'absolute', top: 0, height: '50px', width: '100%', backgroundColor: 'darkgrey'}}/>\r\n            <CSSTransition \r\n                in={menu===\"location\"} \r\n                timeout={500}\r\n                unmountOnExit\r\n                classNames=\"menu-primary\"\r\n            >\r\n                <div className=\"menu\">\r\n                    <div className={classes.title}>\r\n                        SELECT A RIDING\r\n                    </div>\r\n                    <div className={classes.content}>\r\n                    {\r\n                        props.data && props.data.data.map((result)=> {\r\n                            return (\r\n                                <LocationButton key={result.id} resultId={result.id} resultData={result} >{result.name}{arrow === result.id && <ChevronRightIcon/>}</LocationButton>\r\n                            )\r\n                        })\r\n                    }\r\n                </div>\r\n                </div>\r\n            </CSSTransition>\r\n            <CSSTransition \r\n                in={menu===\"results\"} \r\n                unmountOnExit\r\n                timeout={500}\r\n                classNames=\"menu-secondary\"\r\n            >\r\n                <div className=\"menu\">\r\n                    <div className={classes.title}>\r\n                        <ChevronLeftIcon onClick={()=>setMenu('location')} style={{cursor: 'pointer'}}/>{results && results.name.toUpperCase()}\r\n                    </div>\r\n                    <div className={classes.content}>\r\n                        {props.data && menu === 'results' && \r\n                            <Results \r\n                                data={results}\r\n                                parties={props.parties}\r\n                            />\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </CSSTransition>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Sidebar","import React from 'react'\r\n\r\nconst LoadingAnimation = () => {\r\n    return (\r\n        <div className=\"spinnerDiv\">\r\n            <div className=\"spinnerText\">Loading Map..</div>\r\n            <div className=\"spinner\">\r\n                <div className=\"double-bounce1\"></div>\r\n                <div className=\"double-bounce2\"></div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default LoadingAnimation","import React, {useState, useEffect} from 'react';\nimport './App.css';\n\nimport {makeStyles} from '@material-ui/core'\n\n// import { TransformWrapper, TransformComponent } from \"react-zoom-pan-pinch\";\n\n// import Map from './components/Map.js'\nimport MapDiv from './components/MapTest'\nimport Sidebar from './components/Sidebar.js'\nimport LoadingAnimation from './components/LoadingAnimation'\n\n\n\nconst styles = makeStyles({\n  app: {\n    height: '100%',\n    display: 'flex',\n    flexDirection: 'row',\n  }\n})\n\nfunction App() {\n\n  const [data, setData] = useState(null)\n  const [loading, toggleLoading] = useState(true)\n  const [parties, setParties] = useState(null)\n  const [selectedResults, setSelectedResults] = useState(null)\n\n  const classes = styles();\n\n  useEffect(()=>\n    getData()\n  ,[])\n\n  const getData = () => {\n    fetch('/results_2016')\n      .then(res=>res.json())\n      .then(json=>{\n        setData(json);\n        toggleLoading(false)\n      })\n    fetch('/partylist')\n      .then(res=>res.json())\n      .then(json=>{\n        setParties(json)\n      })\n  }\n\n  const handleSelectRiding = (results) => {\n    setSelectedResults(results)\n  }\n\n  return (\n    <div id={'map-widget-app'} className={classes.app}>\n      {!loading  ? <MapDiv \n        data={data}\n        parties={parties}\n        handleSelectRiding={handleSelectRiding}\n        selectedRiding={selectedResults}\n        />\n        :\n        <LoadingAnimation/>\n      }\n        <Sidebar \n          data={data} \n          parties={parties}\n          results={selectedResults} \n          handleSelectRiding={handleSelectRiding}/>\n        \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}