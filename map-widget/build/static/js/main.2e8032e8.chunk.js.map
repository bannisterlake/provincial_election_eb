{"version":3,"sources":["components/Map.js","components/MapTest.js","components/Results.js","components/Sidebar.js","App.js","serviceWorker.js","index.js"],"names":["makeStyles","map","display","height","flex","styles","mapContainer","position","resetButton","boxShadow","width","fontSize","alignItems","justifyContent","borderRadius","background","cursor","color","MapTest","props","useState","lat","lng","zoom","initBounds","setInitBounds","geo","setgeo","mapRef","useRef","geoRef","classes","useEffect","console","log","fetch","then","res","json","bounds","L","geoJSON","getBounds","current","leafletElement","fitBounds","handleFill","data","selectedRiding","zoomToED","name","getPartyResults","EDName","find","ed","toUpperCase","e","feature","partyResults","properties","Constituen","fill","results","parties","party","votes","nameShort","partyCode","colour","getFillByResults","fillColor","weight","fillOpacity","ridingName","findLayer","eachLayer","layer","className","ref","maxBounds","minZoom","TileLayer","attribution","url","GeoJSON","style","onClick","target","layerBounds","clickedRiding","handleSelectRiding","id","resultsRoot","padding","candidateRoot","flexDirection","resultsInfo","fontWeight","imageDiv","backgroundColor","textAlign","bottom","Candidate","candidate","src","Results","pollsReported","pollsTotal","toLocaleString","sidebar","overflow","title","top","paddingLeft","content","marginBottom","overflowX","overflowY","LocationButton","Sidebar","arrow","toggleArrow","menu","setMenu","setResults","onMouseEnter","resultId","onMouseLeave","resultData","children","CSSTransition","in","timeout","unmountOnExit","classNames","result","app","App","setData","toggleLoading","setParties","selectedResults","setSelectedResults","getData","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2e8032e8.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\n\r\nimport {makeStyles} from '@material-ui/core'\r\n\r\nimport {\r\n    ComposableMap,\r\n    Geographies,\r\n    Geography,\r\n    ZoomableGroup\r\n  } from \"react-simple-maps\";\r\n\r\nimport { TransformWrapper, TransformComponent } from \"react-zoom-pan-pinch\";\r\n\r\nconst styles = makeStyles({\r\n    map: {\r\n        display: 'flex',\r\n        height: '100%',\r\n        flex: 3,\r\n    }\r\n});\r\n\r\nconst Map = (props) => {\r\n\r\n    const [zoomCenter, setZoomCenter] = useState({zoom: 1500, center: [-105, 54.5]})\r\n    const classes = styles()\r\n\r\n\r\n    const getFill =(geo) => {\r\n        if (!geo.ConCode) {\r\n            if (geo.name === 'United States of America') {\r\n                return 'lightgrey'\r\n            }\r\n            return 'darkgrey'\r\n        }\r\n        else return 'slategrey'\r\n    }\r\n\r\n    return (\r\n        <div className={classes.map} >\r\n            <TransformComponent>\r\n            <ComposableMap style={{width: '100%', overflow: 'visible', height: '100%'}} projection=\"geoMercator\" projectionConfig={{center: zoomCenter.center, scale: zoomCenter.zoom}}>\r\n                    <Geographies geography={'/SASK_Union_proj_lakes.json'}>\r\n                        {({geographies})=>\r\n                            geographies.map((geo, i)=>{\r\n                                const fill = getFill(geo.properties)\r\n                                return <Geography \r\n                                    key={i}\r\n                                    geography={geo}\r\n                                    fill={fill}\r\n                                    style={{\r\n                                        default: {\r\n                                            outline: 'none'\r\n                                        },\r\n                                        pressed: {\r\n                                            outline: 'none'\r\n                                        },\r\n                                        hover: {\r\n                                            outline: 'none',\r\n                                            opacity: '0.9'\r\n                                        }\r\n                                    }}\r\n                                />\r\n                            })\r\n                        }\r\n                    </Geographies>\r\n            </ComposableMap>\r\n            </TransformComponent>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Map;","import React, { useState, useEffect, useRef } from 'react'\r\nimport { Map, MapControl, TileLayer, GeoJSON, Marker, Popup } from 'react-leaflet'\r\nimport Control from 'react-leaflet-control'\r\nimport L from 'leaflet'\r\n\r\nimport ZoomOutMapIcon from '@material-ui/icons/ZoomOutMap';\r\n\r\nimport {makeStyles} from '@material-ui/core'\r\n\r\nconst styles= makeStyles({\r\n    mapContainer: {\r\n        flex: 3,\r\n        position: 'relative'\r\n    },\r\n    resetButton: {\r\n        display: 'flex',\r\n        boxShadow: '0 1px 4px rgba(0,0,0,0.65)',\r\n        height: 26,\r\n        width: 26,\r\n        fontSize: 14,\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        borderRadius: '4px',\r\n        background: '#FFFFFF',\r\n        cursor: 'pointer',\r\n        color: 'black'\r\n        \r\n    }\r\n})\r\n\r\n\r\n const MapTest = (props) => {\r\n    const [position, setPosition] = useState({lat: 54, lng: -105, zoom: 5});\r\n    const [initBounds, setInitBounds] = useState();\r\n    const [geo, setgeo] = useState(null);\r\n    const mapRef = useRef(null);\r\n    const geoRef = useRef(null)\r\n\r\n    const classes = styles();\r\n\r\n    useEffect(()=> {\r\n        if(!mapRef) {return}\r\n        \r\n        else {\r\n            console.log('here')\r\n            fetch('/SASK_Constituency_boundary.json')\r\n                .then(res=>res.json())\r\n                .then(json=>{\r\n                    setgeo(json)\r\n                    var bounds = L.geoJSON(json).getBounds()\r\n                    setInitBounds(bounds)\r\n                    mapRef.current.leafletElement.fitBounds(bounds)\r\n                    console.log(L.geoJSON(json))\r\n                })\r\n        }   \r\n    }, [])\r\n\r\n    useEffect(()=>{\r\n        handleFill();\r\n    }, [props.data])\r\n\r\n    useEffect(()=> {\r\n        console.log('zoom to riding', props.selectedRiding)\r\n        if (props.selectedRiding) {\r\n            zoomToED(props.selectedRiding.name)\r\n        }\r\n    }, [props.selectedRiding])\r\n\r\n    const getPartyResults = (EDName) => {\r\n        try {\r\n            if (props.data) {\r\n                let partyResults = props.data.data.find(ed=>\r\n                    ed.name.toUpperCase() === EDName.toUpperCase()\r\n                )\r\n                return partyResults\r\n            }\r\n        } catch (e) {\r\n            console.log(\"Couldn't get party results\")\r\n        }\r\n    }\r\n    \r\n    const getFillByResults = (results) =>{\r\n        if(props.parties) {\r\n            let fill = props.parties.data.find(party=>{\r\n                if (results.results[0].votes > 0) {   \r\n                    return party.nameShort === results.results[0].partyCode\r\n                }\r\n            })\r\n            if (fill) {\r\n                return fill.colour\r\n            } else {\r\n                return 'lightgrey'\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    const handleFill = (feature) => {\r\n        if (feature) {\r\n\r\n            let partyResults = getPartyResults(feature.properties.Constituen);\r\n\r\n            let fill = 'lightgrey'\r\n            if (partyResults) {\r\n                fill = getFillByResults(partyResults)\r\n            }\r\n\r\n            return {\r\n                fillColor: fill,\r\n                weight: 0.9,\r\n                color: 'black',\r\n                fillOpacity: 0.8\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleClick = (e) => {\r\n        var bounds = e.target.getBounds();\r\n        var layerBounds = e.layer.getBounds();\r\n        const map = mapRef.current.leafletElement;\r\n        map.fitBounds(layerBounds)\r\n        const clickedRiding = e.layer.feature.properties.Constituen\r\n        const partyResults = getPartyResults(clickedRiding)\r\n        props.handleSelectRiding(partyResults)\r\n    }\r\n\r\n    const zoomToED = (ridingName) => {\r\n        const map = mapRef.current.leafletElement;\r\n        const geo = geoRef.current.leafletElement;\r\n        var findLayer = null;\r\n        geo.eachLayer(layer=>{\r\n            if (layer.feature.properties.Constituen === ridingName.toUpperCase()) {\r\n                findLayer = layer\r\n            }\r\n        })\r\n        map.fitBounds(findLayer.getBounds())\r\n    }\r\n\r\n    const resetBounds = () => {\r\n        const map = mapRef.current.leafletElement\r\n        map.fitBounds(initBounds)\r\n    }\r\n\r\n    return (\r\n        <div className={classes.mapContainer}>\r\n            <Map \r\n                ref={mapRef} \r\n                maxBounds={[[29.305561325527698, -130.53515625000003], [74.16408546675687, -90.54296875000001]]}\r\n                minZoom={5}    \r\n            >\r\n                <TileLayer\r\n                attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                url=\"https://{s}.basemaps.cartocdn.com/light_nolabels/{z}/{x}/{y}.png\"\r\n                />\r\n\r\n                {geo && <GeoJSON ref={geoRef} style={handleFill} data={geo} onClick={handleClick} />  }   \r\n                <Control position=\"topleft\">\r\n                    <a id=\"zoomOut\" style={{color: 'black !important'}} className={`leaflet-control-zoom ${classes.resetButton}`} onClick={resetBounds}>\r\n                        <ZoomOutMapIcon />\r\n\r\n                    </a>\r\n                </Control>\r\n            </Map>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default MapTest;","import React from 'react';\r\nimport {makeStyles} from '@material-ui/core'\r\n\r\nconst styles = makeStyles({\r\n    resultsRoot: {\r\n        padding: 10,\r\n      \r\n    },\r\n    candidateRoot: {\r\n        position: 'relative',\r\n        display: 'flex', \r\n        flexDirection: 'row',\r\n        height: 120,\r\n        padding: '10px 0'\r\n    },\r\n    resultsInfo: {\r\n        display: 'flex', \r\n        alignItems: 'center',\r\n        justifyContent: 'space-between',\r\n        '& #pollsReported': {\r\n            fontSize: 14,\r\n            fontWeight: 'bolder'\r\n        },\r\n        '& #totalVotes': {\r\n            fontSize: 12,\r\n            color: 'darkslategrey'\r\n        }\r\n    },\r\n    imageDiv: {\r\n        backgroundColor: 'red',\r\n        height: '100%',\r\n        borderRadius: '8px',\r\n        textAlign: 'center',\r\n        position: 'relative',\r\n        '& img': {\r\n            borderRadius: '8px'\r\n        },\r\n        '& div': {\r\n            position: 'absolute', \r\n            bottom: 4,\r\n            width: '100%'\r\n        }\r\n    }\r\n})\r\n\r\nconst Candidate = (props) => {\r\n    const {candidate, color} = props\r\n    const classes = styles();\r\n    return (\r\n        <div className={classes.candidateRoot}>\r\n            <div className={classes.imageDiv}>\r\n                <img height={95} src=\"/images.jpg\"/>\r\n                <div>{candidate.partyCode}</div>\r\n            </div>\r\n            <div>\r\n            {candidate.name}\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst Results = (props) => {\r\n    \r\n    const classes = styles();\r\n    const {data} = props;\r\n\r\n    return (\r\n        <div className={classes.resultsRoot}>\r\n            {props.data && \r\n        <>\r\n            <div className={classes.resultsInfo}>\r\n                <div id=\"pollsReported\">{data.pollsReported}/{data.pollsTotal} polls reported</div>\r\n                <div id=\"totalVotes\">{data.votes.toLocaleString('en')} total votes</div>\r\n            </div>\r\n                <div>\r\n                    {props.data.results.map(candidate=> {\r\n                        return <Candidate candidate={candidate}/>\r\n                    })}\r\n                </div>    \r\n            </>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Results","import React, {useState, useEffect} from 'react'\r\n\r\nimport {makeStyles, Slide} from '@material-ui/core';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\n\r\nimport {CSSTransition} from 'react-transition-group'\r\n\r\nimport Results from './Results'\r\n\r\nconst styles = makeStyles({\r\n    sidebar: {\r\n        flex: 1, \r\n        position: 'relative',\r\n        display: 'flex',\r\n        overflow: 'hidden'\r\n    },\r\n    title: {\r\n        width: '100%',\r\n        top: 0,\r\n        backgroundColor: 'darkgrey',\r\n        color: 'white',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        height: 50,\r\n        paddingLeft: 10,\r\n        fontWeight: 'bolder',\r\n        // textAlign: 'center',\r\n        // verticalAlign: 'middle'\r\n    },\r\n    content: {\r\n        marginBottom: 10,\r\n        height: 'calc(100% - 30px)',\r\n        overflowX: 'hidden',\r\n        overflowY: 'scroll'\r\n\r\n    },\r\n    LocationButton: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        height: 50,\r\n        paddingLeft: 10,\r\n        justifyContent: 'space-between',\r\n        '&:hover': {\r\n            backgroundColor: 'lightgrey',\r\n            cursor: 'pointer'\r\n        }\r\n    }\r\n})\r\n\r\nconst Sidebar = (props) =>  {\r\n    const [title, setTitle] = useState('Select a riding');\r\n    const [arrow, toggleArrow] = useState(0)\r\n    const classes=styles();\r\n    const [menu, setMenu] = useState('location')\r\n    const [results, setResults] = useState(null)\r\n\r\n    useEffect(()=>{\r\n        if (props.results) {\r\n            console.log(\"setting results\")\r\n            setResults(props.results)\r\n            setMenu('results')\r\n\r\n        }\r\n    },[props.results])\r\n\r\n\r\n    const handleSelectRiding = (results) => {\r\n        props.handleSelectRiding(results);\r\n        setResults(results); \r\n        setMenu('results')\r\n    }   \r\n\r\n    const LocationButton = (props) => {\r\n        return (\r\n            <div\r\n                className={`${classes.LocationButton} menu-item`}\r\n                onMouseEnter={()=>toggleArrow(props.resultId)}\r\n                onMouseLeave={()=>toggleArrow(0)}\r\n                onClick={()=>handleSelectRiding(props.resultData)}\r\n            >\r\n                {props.children}\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n    return (\r\n        <div id=\"widgetSidebar\" className={classes.sidebar}>\r\n            <div style={{position: 'absolute', top: 0, height: '50px', width: '100%', backgroundColor: 'darkgrey'}}/>\r\n            <CSSTransition \r\n                in={menu===\"location\"} \r\n                timeout={500}\r\n                unmountOnExit\r\n                classNames=\"menu-primary\"\r\n            >\r\n                <div className=\"menu\">\r\n                    <div className={classes.title}>\r\n                        {title.toUpperCase()}\r\n                    </div>\r\n                    <div className={classes.content}>\r\n                    {\r\n                        props.data && props.data.data.map(result=> {\r\n                            return (\r\n                                <LocationButton resultId={result.id} resultData={result} >{result.name}{arrow === result.id && <ChevronRightIcon/>}</LocationButton>\r\n                            )\r\n                        })\r\n                    }\r\n                </div>\r\n                </div>\r\n            </CSSTransition>\r\n            <CSSTransition \r\n                in={menu===\"results\"} \r\n                unmountOnExit\r\n                timeout={500}\r\n                classNames=\"menu-secondary\"\r\n            >\r\n                <div className=\"menu\">\r\n                    <div className={classes.title}>\r\n                        <ChevronLeftIcon onClick={()=>setMenu('location')} style={{cursor: 'pointer'}}/>{results && results.name.toUpperCase()}\r\n                    </div>\r\n                    <div className={classes.content}>\r\n                        {props.data && menu === 'results' && \r\n                            <Results data={results} />\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </CSSTransition>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Sidebar","import React, {useState, useEffect} from 'react';\nimport './App.css';\n\nimport {makeStyles} from '@material-ui/core'\n\nimport { TransformWrapper, TransformComponent } from \"react-zoom-pan-pinch\";\n\nimport Map from './components/Map.js'\nimport MapDiv from './components/MapTest'\nimport Sidebar from './components/Sidebar.js'\n\n\n\nconst styles = makeStyles({\n  app: {\n    height: '100%',\n    display: 'flex',\n    flexDirection: 'row',\n  }\n})\n\nfunction App() {\n\n  const [data, setData] = useState(null)\n  const [loading, toggleLoading] = useState(true)\n  const [parties, setParties] = useState(null)\n  const [selectedResults, setSelectedResults] = useState(null)\n\n  const classes = styles();\n\n  useEffect(()=>\n    getData()\n  ,[])\n\n  const getData = () => {\n    fetch('/data/SASK_2016.json')\n      .then(res=>res.json())\n      .then(json=>{\n        setData(json);\n        toggleLoading(false)\n      })\n    fetch('/data/partylist.json')\n      .then(res=>res.json())\n      .then(json=>{\n        setParties(json)\n      })\n  }\n\n  const handleSelectRiding = (results) => {\n    console.log(results)\n    setSelectedResults(results)\n  }\n\n  return (\n    <div id={'map-widget-app'} className={classes.app}>\n      <MapDiv \n        data={data}\n        parties={parties}\n        handleSelectRiding={handleSelectRiding}\n        selectedRiding={selectedResults}\n        />\n        {/* <TransformWrapper\n          options={{\n            limitToBounds: false,\n            maxScale: 1000,\n          }}\n        >\n          <Map />\n        </TransformWrapper> */}\n        <Sidebar data={data} \n          results={selectedResults} \n          handleSelectRiding={handleSelectRiding}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}