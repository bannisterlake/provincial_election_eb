{"version":3,"sources":["components/Tooltip.js","components/MapTest.js","components/Results.js","components/Sidebar.js","components/LoadingAnimation.js","App.js","serviceWorker.js","index.js"],"names":["styles","makeStyles","geoTooltip","fontFamily","display","flexDirection","transition","tooltipName","fontSize","fontWeight","tooltipPolls","color","paddingBottom","tooltipWinner","backgroundColor","props","padding","Tooltip","classes","className","results","name","pollsReported","pollsTotal","style","id","partyCode","mapContainer","flex","position","resetButton","boxShadow","height","width","alignItems","justifyContent","borderRadius","background","cursor","defaultStyle","weight","fillOpacity","selectedStyle","MapTest","useState","initBounds","setInitBounds","currentBounds","setCurrentBounds","geo","setgeo","mapRef","useRef","geoRef","useEffect","console","log","fetch","then","res","json","bounds","L","geoJSON","getBounds","current","leafletElement","fitBounds","data","selectedRiding","zoomToED","eachLayer","layer","feature","properties","Name","toUpperCase","setStyle","resetBounds","getPartyResults","EDName","find","ed","e","getFillByResults","parties","length","fill","party","votes","nameShort","err","ridingName","map","findLayer","Map","ref","zoomSnap","zoomDelta","minZoom","TileLayer","attribution","url","GeoJSON","partyResults","fillColor","onClick","layerBounds","closeTooltip","clickedRiding","handleSelectRiding","onEachFeature","featureData","featureColor","bindTooltip","ReactDOMServer","renderToString","sticky","direction","onMouseOver","onMouseOut","PED_Name_E","resultsRoot","candidateRoot","resultsInfo","imageDiv","marginBottom","overflow","bottom","textAlign","candidateLeftDiv","candidateName","candidateRightDiv","justifySelf","votesDiv","Candidate","candidate","alt","onError","target","src","cachedHeadFilename","split","isIncumbent","percent","toLocaleString","isElected","paddingRight","Results","i","partyColor","findParty","getPartyColor","key","sidebar","title","top","paddingLeft","content","overflowX","overflowY","LocationButton","Sidebar","arrow","toggleArrow","menu","setMenu","setResults","onMouseEnter","resultId","onMouseLeave","resultData","children","CSSTransition","in","timeout","unmountOnExit","classNames","sort","a","b","result","LoadingAnimation","app","App","setData","loading","toggleLoading","setParties","selectedResults","setSelectedResults","timer","getData","startTimer","setInterval","catch","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.7728e8f7.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nimport {makeStyles} from '@material-ui/core'\r\n\r\nconst styles = makeStyles({\r\n    geoTooltip: {\r\n        fontFamily: 'Roboto, Ubuntu, Helvetica',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        transition: '1s'\r\n    },\r\n    tooltipName: {\r\n        fontSize: 20,\r\n\r\n        fontWeight: 'bolder',\r\n    },\r\n    tooltipPolls: {\r\n        fontSize: 14,\r\n        color: 'grey',\r\n        paddingBottom: 10\r\n    },\r\n    tooltipWinner:{\r\n        backgroundColor: props=>props.color,\r\n        color: 'white',\r\n        padding: 5, \r\n        '& #tooltipPartyCode': {\r\n            fontSize: 18\r\n        },\r\n        '& #tooltipWinnerName': {\r\n            fontSize: 20,\r\n            fontWeight: 'bolder'\r\n        }\r\n    }\r\n})\r\n\r\n\r\nconst Tooltip = (props) => {\r\n\r\n    const classes = styles(props)\r\n\r\n    return (\r\n        <div className={classes.geoTooltip}>\r\n            <div className={classes.tooltipName}>{props.results.name}</div>\r\n            <div className={classes.tooltipPolls}>{props.results.pollsReported}/{props.results.pollsTotal} polls reported</div>\r\n            {props.results.pollsReported > 0 && \r\n            <div className={classes.tooltipWinner} style={{backgroundColor: props.color}}>\r\n                <div id=\"tooltipPartycode\">{props.results.results[0].partyCode}</div>\r\n                <div id=\"tooltipWinnerName\">{props.results.results[0].name}</div>\r\n            </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Tooltip","import React, { useState, useEffect, useRef } from 'react'\r\nimport ReactDOMServer from 'react-dom/server'\r\nimport { Map, TileLayer, GeoJSON } from 'react-leaflet'\r\nimport Control from 'react-leaflet-control'\r\nimport L from 'leaflet'\r\n\r\nimport ZoomOutMapIcon from '@material-ui/icons/ZoomOutMap';\r\n\r\nimport {makeStyles} from '@material-ui/core'\r\n\r\nimport Tooltip from './Tooltip'\r\n\r\nconst styles= makeStyles({\r\n    mapContainer: {\r\n        flex: 4,\r\n        position: 'relative'\r\n    },\r\n    resetButton: {\r\n        display: 'flex',\r\n        boxShadow: '0 1px 4px rgba(0,0,0,0.65)',\r\n        height: 26,\r\n        width: 26,\r\n        fontSize: 14,\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        borderRadius: '4px',\r\n        background: '#FFFFFF',\r\n        cursor: 'pointer',\r\n        color: 'black'\r\n        \r\n    }\r\n})\r\n\r\nconst defaultStyle={\r\n    weight: 0.9,\r\n    color: 'black',\r\n    fillOpacity: 0.9\r\n}\r\n\r\nconst selectedStyle={\r\n    weight: 3,\r\n    fillOpacity: 1\r\n}\r\n\r\n\r\n const MapTest = (props) => {\r\n    // const [position, setPosition] = useState({lat: 54, lng: -105, zoom: 5});\r\n    const [initBounds, setInitBounds] = useState();\r\n    const [currentBounds, setCurrentBounds] = useState();\r\n    const [geo, setgeo] = useState(null);\r\n    // const [selectedRiding, setSelectedRiding] = useState(null)\r\n    const mapRef = useRef(null);\r\n    const geoRef = useRef(null)\r\n\r\n    const classes = styles();\r\n\r\n    useEffect(()=> {\r\n        console.log('render map')\r\n        if(!mapRef) {return}\r\n        else {\r\n            fetch('/geojson')\r\n                .then(res=>res.json())\r\n                .then(json=>{\r\n                    setgeo(json)\r\n                    var bounds = L.geoJSON(json).getBounds()\r\n                    setInitBounds(bounds)\r\n                    var map = mapRef.current.leafletElement\r\n                    map.fitBounds(bounds)\r\n                    // map.setZoom(7.75)\r\n                    // map.setMaxBounds(bounds)\r\n                })\r\n        }   \r\n    }, [props.data])\r\n\r\n    useEffect(()=> {\r\n        console.log(props.selectedRiding)\r\n        if (props.selectedRiding) {\r\n\r\n            zoomToED(props.selectedRiding.name)\r\n            const geo = geoRef.current.leafletElement;\r\n            geo.eachLayer(layer=>{\r\n                if (layer.feature.properties.Name.toUpperCase() === props.selectedRiding.name.toUpperCase()) {\r\n                    layer.setStyle({\r\n                        weight: 3,\r\n                        fillOpacity: 1\r\n                    })\r\n                }\r\n            })\r\n        } else {\r\n            resetBounds()\r\n        }\r\n    }, [props.selectedRiding])\r\n\r\n    const getPartyResults = (EDName) => {\r\n        try {\r\n            if (props.data) {\r\n                let partyResults = props.data.data.find(ed=>\r\n                    ed.name.toUpperCase() === EDName.toUpperCase()\r\n                )\r\n                return partyResults\r\n            }\r\n        } catch (e) {\r\n            console.log(\"Couldn't get party results\")\r\n        }\r\n    }\r\n    \r\n    const getFillByResults = (results) =>{\r\n        try {\r\n            if(props.parties && results.results.length > 0) {\r\n                let fill = props.parties.find(party=>{\r\n                    if (results.results[0].votes > 0) {   \r\n                        return party.nameShort === results.results[0].partyCode\r\n                    }\r\n                })\r\n                if (fill) {\r\n                    return fill.color\r\n                } else {\r\n                    return 'lightgrey'\r\n                }\r\n            } else {\r\n                return 'lightgrey'\r\n            }\r\n        } catch(err) {\r\n            console.log(\"Error getting Geo Fill for \", results.name)\r\n            return 'lightgrey'\r\n        } \r\n    }\r\n\r\n\r\n    const handleFill = (feature) => {\r\n        if (feature) {\r\n            let partyResults = getPartyResults(feature.properties.Name);\r\n            let fill = 'lightgrey'\r\n            if (partyResults) {\r\n                fill = getFillByResults(partyResults)\r\n            }\r\n            return {\r\n                fillColor: fill,\r\n                weight: 0.9,\r\n                color: 'black',\r\n                fillOpacity: 0.9\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleClick = (e) => {\r\n        // var mapbounds = e.target.getBounds();\r\n        var layerBounds = e.layer.getBounds();\r\n\r\n        if (currentBounds === layerBounds) {\r\n            e.layer.closeTooltip()\r\n        } else {\r\n            const map = mapRef.current.leafletElement;\r\n            setCurrentBounds(layerBounds)\r\n            map.fitBounds(layerBounds)\r\n            const clickedRiding = e.layer.feature.properties.Name\r\n            const partyResults = getPartyResults(clickedRiding)\r\n            props.handleSelectRiding(partyResults)\r\n            // setSelectedRiding(e.layer.feature.properties.Name)\r\n            e.layer.setStyle(selectedStyle)\r\n        }\r\n    }\r\n\r\n    const zoomToED = (ridingName) => {\r\n        try {\r\n            const map = mapRef.current.leafletElement;\r\n            const geo = geoRef.current.leafletElement;\r\n            var findLayer = null;\r\n            geo.eachLayer(layer=>{\r\n                if (layer.feature.properties.Name.toUpperCase() === ridingName.toUpperCase()) {\r\n                    findLayer = layer\r\n                }\r\n            })\r\n            map.fitBounds(findLayer.getBounds())\r\n        } catch(err) {\r\n            console.log(\"Error zooming to \"+ ridingName)\r\n        }\r\n    }\r\n\r\n    const resetBounds = () => {\r\n        try {\r\n            const map = mapRef.current.leafletElement\r\n            map.fitBounds(initBounds)    \r\n        } catch (err) {\r\n\r\n        }\r\n    }\r\n\r\n    function highlightFeature(e) {\r\n        e.layer.setStyle(selectedStyle)\r\n    }\r\n\r\n    function resetFeature(e) {\r\n        if (props.selectedRiding) {\r\n            let layerName = e.layer.feature.properties.PED_Name_E\r\n            if (layerName.toUpperCase() !== props.selectedRiding.name.toUpperCase()) {\r\n                e.layer.setStyle(defaultStyle)\r\n            } \r\n        } else {\r\n            e.layer.setStyle(defaultStyle)\r\n        }\r\n    }\r\n\r\n    const getTooltipData = (feature, layer) => {\r\n        if (feature.properties ) {\r\n            try {\r\n                const featureData = getPartyResults(feature.properties.Name)\r\n                const featureColor = getFillByResults(featureData)\r\n                if (featureData && featureColor) {\r\n                    layer.bindTooltip(ReactDOMServer.renderToString(<Tooltip results={featureData} color={featureColor} />), {sticky: false, direction: 'top'})\r\n                }\r\n            } catch(e) {\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={classes.mapContainer}>\r\n            <Map \r\n                ref={mapRef} \r\n                zoomSnap={0.25}\r\n                zoomDelta={0.5}\r\n                // maxBounds={[[29.305561325527698, -130.53515625000003], [74.16408546675687, -90.54296875000001]]}\r\n                minZoom={3}    \r\n            >\r\n                <TileLayer\r\n                attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                url=\"https://{s}.basemaps.cartocdn.com/light_nolabels/{z}/{x}/{y}.png\"\r\n                />\r\n\r\n                {geo && \r\n                <GeoJSON \r\n                    ref={geoRef} \r\n                    style={handleFill} \r\n                    data={geo} \r\n                    onClick={handleClick} \r\n                    onEachFeature={getTooltipData}\r\n                    onMouseOver={highlightFeature}\r\n                    onMouseOut={resetFeature}\r\n                />  \r\n                }   \r\n                <Control position=\"topleft\">\r\n                    <a id=\"zoomOut\" style={{color: 'black !important'}} className={`leaflet-control-zoom leaflet-bar ${classes.resetButton}`} onClick={resetBounds}>\r\n                        <ZoomOutMapIcon />\r\n\r\n                    </a>\r\n                </Control>\r\n            </Map>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default MapTest;","import React from 'react';\r\nimport {makeStyles} from '@material-ui/core'\r\n\r\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\r\n\r\nconst styles = makeStyles({\r\n    resultsRoot: {\r\n        padding: 10,\r\n      \r\n    },\r\n    candidateRoot: {\r\n        position: 'relative',\r\n        display: 'flex', \r\n        flexDirection: 'row',\r\n        height: 120,\r\n        padding: '10px 0'\r\n    },\r\n    resultsInfo: {\r\n        display: 'flex', \r\n        alignItems: 'center',\r\n        justifyContent: 'space-between',\r\n        '& #pollsReported': {\r\n            fontSize: 14,\r\n            fontWeight: 'bolder'\r\n        },\r\n        '& #totalVotes': {\r\n            fontSize: 12,\r\n            color: 'darkslategrey'\r\n        }\r\n    },\r\n    imageDiv: {\r\n        height: '100%',\r\n        position: 'relative',\r\n        marginBottom: 25,\r\n        width: 70,\r\n        borderRadius: '8px',\r\n        overflow: 'hidden',\r\n        '& #partyCode': {\r\n            position: 'absolute', \r\n            bottom: 8,\r\n            color: 'white',\r\n            width: '100%',\r\n            textAlign: 'center'\r\n        },\r\n        '& img': {\r\n            width: '100%',\r\n            height: 'auto'\r\n        }\r\n    },\r\n    candidateLeftDiv: {\r\n        flex: 3, \r\n        display: 'flex', \r\n        flexDirection: 'column',\r\n        justifyContent: 'space-between',\r\n        padding: '10px 0 10px 10px',\r\n\r\n        '& #candidateIncumbent': {\r\n            fontSize: 13,\r\n            fontWeight: 'lighter'\r\n        }\r\n    },\r\n    candidateName: {\r\n        '& #candidateFirst': {\r\n            fontWeight: 'bolder',\r\n            fontSize: 14\r\n        },\r\n        '& #candidateLast': {\r\n            fontWeight: 'bolder',\r\n            fontSize: 22\r\n        }\r\n    }, \r\n    candidateRightDiv: {\r\n        flex: 2, \r\n        justifySelf: 'flex-end',\r\n        display: 'flex', \r\n        flexDirection: 'column',\r\n        padding: '10px 0',\r\n        justifyContent: 'space-between',\r\n        '& #candidateElected': {\r\n            display: 'flex', \r\n            alignItems: 'center',\r\n            justifyContent: 'flex-end',\r\n            fontSize: 14\r\n        }\r\n    },\r\n    votesDiv: {\r\n        textAlign: 'right',\r\n        '& #votesPercent': {\r\n            fontSize: 22,\r\n            fontWeight: 'bolder'\r\n        },\r\n        '& #votesTotal': {\r\n            fontSize: 14,\r\n            fontWeight: 'lighter'\r\n        }\r\n    }\r\n})\r\n\r\nconst Candidate = (props) => {\r\n    const {candidate, color} = props\r\n    const classes = styles();\r\n    return (\r\n        <div className={classes.candidateRoot}>\r\n            <div style={{backgroundColor: color}} className={classes.imageDiv}>\r\n                <img  alt=\"Candidate Headshot\" onError={(e) => { e.target.onError = null; e.target.src =`/img/images.jpg`}} src={`/img/${candidate.cachedHeadFilename}`}/>\r\n                <div id=\"partyCode\">{candidate.partyCode}</div>\r\n            </div>\r\n            <div className={classes.candidateLeftDiv}>\r\n                <div className={classes.candidateName}>\r\n                    <div id=\"candidateFirst\">{candidate.name.split(' ')[0]}</div>\r\n                    <div id=\"candidateLast\" >{candidate.name.split(' ')[candidate.name.split(' ').length - 1]}</div>\r\n                </div>\r\n                <div id=\"candidateIncumbent\">{candidate.isIncumbent && 'Incumbent'}</div>\r\n            </div>\r\n            <div className={classes.candidateRightDiv}>\r\n                <div className={classes.votesDiv}>\r\n                    <div id='votesPercent'>{candidate.percent}%</div>\r\n                    <div id='votesTotal'>{candidate.votes.toLocaleString('en')} total votes</div>\r\n                </div>\r\n                {candidate.isElected ? <div id=\"candidateElected\">\r\n                    <CheckCircleIcon style={{paddingRight: 5, fontSize: 14, color: 'green'}} /> Elected\r\n                </div>\r\n                :\r\n                <div style={{fontSize: 14}}/>\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst Results = (props) => {\r\n    \r\n    const classes = styles();\r\n    const {data} = props;\r\n\r\n    const getPartyColor = (candidate) => {\r\n        let color = \"#595b5b\" \r\n        if (props.parties) {\r\n            let findParty = props.parties.find(party=>party.nameShort === candidate.partyCode)\r\n            if (findParty) {\r\n                color = findParty.color\r\n            }\r\n        }\r\n        return color\r\n\r\n    }\r\n\r\n    return (\r\n        <div className={classes.resultsRoot}>\r\n            {props.data && \r\n        <>\r\n            <div className={classes.resultsInfo}>\r\n                <div id=\"pollsReported\">{data.pollsReported}/{data.pollsTotal} polls reported</div>\r\n                <div id=\"totalVotes\">{data.votes.toLocaleString('en')} total votes</div>\r\n            </div>\r\n                <div>\r\n                    {props.data.results.map((candidate, i)=> {\r\n                        let partyColor = getPartyColor(candidate);\r\n                        return <Candidate key={i} color={partyColor} candidate={candidate}/>\r\n                    })}\r\n                </div>    \r\n            </>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Results","import React, {useState, useEffect} from 'react'\r\n\r\nimport {makeStyles} from '@material-ui/core';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\n\r\nimport {CSSTransition} from 'react-transition-group'\r\n\r\nimport Results from './Results'\r\n\r\nconst styles = makeStyles({\r\n    sidebar: {\r\n        flex: 2, \r\n        position: 'relative',\r\n        display: 'flex',\r\n        overflow: 'hidden'\r\n    },\r\n    title: {\r\n        width: '100%',\r\n        top: 0,\r\n        backgroundColor: 'darkgrey',\r\n        color: 'white',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        height: 50,\r\n        paddingLeft: 10,\r\n        fontWeight: 'bolder',\r\n        // textAlign: 'center',\r\n        // verticalAlign: 'middle'\r\n    },\r\n    content: {\r\n        marginBottom: 10,\r\n        height: 'calc(100% - 50px)',\r\n        overflowX: 'hidden',\r\n        overflowY: 'scroll'\r\n\r\n    },\r\n    LocationButton: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        height: 50,\r\n        paddingLeft: 10,\r\n        justifyContent: 'space-between',\r\n        '&:hover': {\r\n            backgroundColor: 'lightgrey',\r\n            cursor: 'pointer'\r\n        }\r\n    }\r\n})\r\n\r\nconst Sidebar = (props) =>  {\r\n    const [arrow, toggleArrow] = useState(0)\r\n    const classes=styles();\r\n    const [menu, setMenu] = useState('location')\r\n    const [results, setResults] = useState(null)\r\n\r\n    useEffect(()=>{\r\n        if (props.results) {\r\n            setResults(props.results)\r\n            setMenu('results')\r\n\r\n        }\r\n    },[props.results])\r\n\r\n\r\n    const handleSelectRiding = (results) => {\r\n        props.handleSelectRiding(results);\r\n        setResults(results); \r\n        setMenu('results')\r\n    }   \r\n\r\n    const LocationButton = (props) => {\r\n        return (\r\n            <div\r\n                className={`${classes.LocationButton} menu-item`}\r\n                onMouseEnter={()=>toggleArrow(props.resultId)}\r\n                onMouseLeave={()=>toggleArrow(0)}\r\n                onClick={()=>handleSelectRiding(props.resultData)}\r\n            >\r\n                {props.children}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const handleBack = () => {\r\n        setMenu('location')\r\n        props.handleSelectRiding(null)\r\n    }\r\n\r\n\r\n    return (\r\n        <div id=\"widgetSidebar\" className={classes.sidebar}>\r\n            <div style={{position: 'absolute', top: 0, height: '50px', width: '100%', backgroundColor: 'darkgrey'}}/>\r\n            <CSSTransition \r\n                in={menu===\"location\"} \r\n                timeout={500}\r\n                unmountOnExit\r\n                classNames=\"menu-primary\"\r\n            >\r\n                <div className=\"menu\">\r\n                    <div className={classes.title}>\r\n                        SELECT A RIDING\r\n                    </div>\r\n                    <div className={classes.content}>\r\n                    {\r\n                        props.data && props.data.data.sort((a,b)=>{\r\n                            if (a.name > b.name) {\r\n                                return 1\r\n                            } else return -1\r\n                        })\r\n                        .map((result)=> {\r\n                            return (\r\n                                <LocationButton key={result.id} resultId={result.id} resultData={result} >{result.name}{arrow === result.id && <ChevronRightIcon/>}</LocationButton>\r\n                            )\r\n                        })\r\n                    }\r\n                </div>\r\n                </div>\r\n            </CSSTransition>\r\n            <CSSTransition \r\n                in={menu===\"results\"} \r\n                unmountOnExit\r\n                timeout={500}\r\n                classNames=\"menu-secondary\"\r\n            >\r\n                <div className=\"menu\">\r\n                    <div className={classes.title}>\r\n                        <ChevronLeftIcon onClick={handleBack} style={{cursor: 'pointer'}}/>{results && results.name.toUpperCase()}\r\n                    </div>\r\n                    <div className={classes.content}>\r\n                        {props.data && menu === 'results' && \r\n                            <Results \r\n                                data={results}\r\n                                parties={props.parties}\r\n                            />\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </CSSTransition>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Sidebar","import React from 'react'\r\n\r\nconst LoadingAnimation = () => {\r\n    return (\r\n        <div className=\"spinnerDiv\">\r\n            <div className=\"spinnerText\">Loading Map..</div>\r\n            <div className=\"spinner\">\r\n                <div className=\"double-bounce1\"></div>\r\n                <div className=\"double-bounce2\"></div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default LoadingAnimation","import React, {useState, useEffect} from 'react';\nimport './App.css';\n\nimport {makeStyles} from '@material-ui/core'\n\n// import { TransformWrapper, TransformComponent } from \"react-zoom-pan-pinch\";\n\n// import Map from './components/Map.js'\nimport MapDiv from './components/MapTest'\nimport Sidebar from './components/Sidebar.js'\nimport LoadingAnimation from './components/LoadingAnimation'\n\n\n\nconst styles = makeStyles({\n  app: {\n    height: '100%',\n    display: 'flex',\n    flexDirection: 'row',\n    \n  }\n})\n\nfunction App() {\n\n  const [data, setData] = useState(null)\n  const [loading, toggleLoading] = useState(true)\n  const [parties, setParties] = useState(null)\n  const [selectedResults, setSelectedResults] = useState(null)\n  const [timer, setTimer] = useState(300000)\n\n  const classes = styles();\n\n  useEffect(()=>{\n    console.log(`Updating every ${timer/1000} seconds`)\n    getData()\n    startTimer()\n  },[])\n\n  const startTimer = () => {\n      setInterval(()=>{\n          getData();\n      }, timer);\n    }\n\n  const getData = () => {\n    console.log(\"fetching\")\n    fetch('/fullresults')\n      .then(res=>res.json())\n      .then(json=>{\n        setData(json);\n        toggleLoading(false)\n      })\n      .catch(err=>console.log(\"Error fetching FULLELECTIONDATA, check your env variables and try again\"))\n    \n    fetch('/overallresults')\n      .then(res=>res.json())\n      .then(json=>{\n        setParties(json.partyResults)\n      })\n      .catch(err=>console.log(\"Error fetching OVERALLRESULTS, check your env variables and try again\"))\n    \n  }\n\n  const handleSelectRiding = (results) => {\n    setSelectedResults(results)\n  }\n\n  return (\n    <div id={'map-widget-app'} className={classes.app}>\n      {!loading  ? <MapDiv \n        data={data}\n        parties={parties}\n        handleSelectRiding={handleSelectRiding}\n        selectedRiding={selectedResults}\n        />\n        :\n        <LoadingAnimation/>\n      }\n        <Sidebar \n          data={data} \n          parties={parties}\n          results={selectedResults} \n          handleSelectRiding={handleSelectRiding}/>\n        \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}