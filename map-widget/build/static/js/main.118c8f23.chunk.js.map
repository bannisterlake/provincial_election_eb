{"version":3,"sources":["components/MapTest.js","components/Tooltip.js","components/Results.js","components/Sidebar.js","components/LoadingAnimation.js","components/Pictureloader.js","App.js","serviceWorker.js","index.js"],"names":["styles","makeStyles","geoTooltip","fontFamily","display","flexDirection","transition","tooltipName","fontSize","fontWeight","tooltipPolls","color","paddingBottom","tooltipWinner","backgroundColor","props","padding","mapContainer","flex","position","resetButton","boxShadow","height","width","alignItems","justifyContent","borderRadius","background","cursor","MapTest","useState","initBounds","setInitBounds","setgeo","mapRef","useRef","classes","useEffect","console","log","axios","get","then","res","status","data","bounds","L","geoJSON","getBounds","catch","err","className","Map","ref","zoomSnap","zoomDelta","minZoom","TileLayer","attribution","url","id","style","onClick","current","leafletElement","fitBounds","resultsRoot","candidateRoot","resultsInfo","imageDiv","screensize","marginBottom","minWidth","overflow","bottom","textAlign","candidateLeftDiv","candidateName","candidateRightDiv","justifySelf","votesDiv","Candidate","candidate","name","split","pop","alt","onError","e","target","src","cachedHeadFilename","partyCode","firstName","lastName","isIncumbent","percent","votes","toLocaleString","isElected","paddingRight","Results","pollsReported","pollsTotal","results","map","i","partyColor","parties","findParty","find","party","nameShort","getPartyColor","key","sidebar","title","top","minHeight","paddingLeft","content","overflowX","overflowY","LocationButton","Sidebar","arrow","toggleArrow","menu","setMenu","setResults","handleSelectRiding","onMouseEnter","resultId","onMouseLeave","resultData","children","CSSTransition","in","timeout","unmountOnExit","classNames","sort","a","b","result","toUpperCase","small","LoadingAnimation","React","memo","riding","require","app","App","setData","loading","toggleLoading","setParties","selectedResults","setSelectedResults","timer","window","innerWidth","getData","startTimer","getResultsFromURL","setInterval","partyResults","hash","location","decodeURI","replace","toLowerCase","selectedRiding","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.118c8f23.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\r\nimport ReactDOMServer from 'react-dom/server'\r\nimport { Map, TileLayer, GeoJSON } from 'react-leaflet'\r\nimport Control from 'react-leaflet-control'\r\nimport L from 'leaflet'\r\n\r\nimport ZoomOutMapIcon from '@material-ui/icons/ZoomOutMap';\r\n\r\nimport {makeStyles} from '@material-ui/core'\r\n\r\nimport Tooltip from './Tooltip'\r\nimport axios from 'axios'\r\nimport 'babel-polyfill'\r\n\r\nconst styles= makeStyles({\r\n    mapContainer: {\r\n        flex: 4,\r\n        position: 'relative'\r\n    },\r\n    resetButton: {\r\n        display: 'flex',\r\n        boxShadow: '0 1px 4px rgba(0,0,0,0.65)',\r\n        height: 26,\r\n        width: 26,\r\n        fontSize: 14,\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        borderRadius: '4px',\r\n        background: '#FFFFFF',\r\n        cursor: 'pointer',\r\n        color: 'black'\r\n        \r\n    }\r\n})\r\n\r\nconst defaultStyle={\r\n    weight: 0.9,\r\n    color: 'black',\r\n    fillOpacity: 0.9\r\n}\r\n\r\nconst selectedStyle={\r\n    weight: 3,\r\n    fillOpacity: 1\r\n}\r\n\r\n\r\n const MapTest = (props) => {\r\n    // const [position, setPosition] = useState({lat: 54, lng: -105, zoom: 5});\r\n    const [initBounds, setInitBounds] = useState();\r\n    const [currentBounds, setCurrentBounds] = useState();\r\n    const [geo, setgeo] = useState(null);\r\n    // const [selectedRiding, setSelectedRiding] = useState(null)\r\n    const mapRef = useRef(null);\r\n    const geoRef = useRef(null)\r\n\r\n    const classes = styles();\r\n\r\n    useEffect(()=> {\r\n        console.log('render map')\r\n        if(!mapRef) {\r\n            console.log('no mapRef')\r\n            return}\r\n        else {\r\n            axios.get('/geojson')\r\n                .then(res=>{\r\n                    if (res.status === 200) {\r\n                        setgeo(res.data)\r\n                        var bounds = L.geoJSON(res.data).getBounds()\r\n                        setInitBounds(bounds)\r\n                        console.log('mapref', mapRef)\r\n                        // var map = mapRef.current.leafletElement\r\n                        // map.fitBounds(bounds)\r\n                    }\r\n                })\r\n                .catch(err=>{\r\n                    console.log(err);\r\n                    console.log('error getting geojson data')\r\n                })\r\n        }   \r\n    }, [props.data])\r\n\r\n    // useEffect(()=> {\r\n    //     console.log(geoRef)\r\n    //     if (props.selectedRiding) {\r\n    //         zoomToED(props.selectedRiding.name)\r\n    //         if (geoRef.current) {\r\n    //             const geo = geoRef.current.leafletElement;\r\n\r\n    //             geo.eachLayer(layer=>{\r\n    //                 if (layer.feature.properties.Name.toUpperCase() === props.selectedRiding.name.toUpperCase()) {\r\n    //                     layer.setStyle({\r\n    //                         weight: 3,\r\n    //                         fillOpacity: 1\r\n    //                     })\r\n    //                 }\r\n    //             })\r\n    //         }\r\n            \r\n    //     } else {\r\n    //         resetBounds()\r\n    //     }\r\n    // }, [geoRef.current, props.selectedRiding])\r\n\r\n    const getPartyResults = (EDName) => {\r\n        try {\r\n            if (props.data) {\r\n                let partyResults = props.data.data.find(ed=>\r\n                    ed.name.toUpperCase() === EDName.toUpperCase()\r\n                )\r\n                return partyResults\r\n            }\r\n        } catch (e) {\r\n            console.log(\"Couldn't get party results\")\r\n        }\r\n    }\r\n    \r\n    const getFillByResults = (results) =>{\r\n        try {\r\n            if(props.parties && results.results.length > 0) {\r\n                let fill = props.parties.find(party=>{\r\n                    if (results.results[0].votes > 0) {   \r\n                        return party.nameShort === results.results[0].partyCode\r\n                    }\r\n                })\r\n                if (fill) {\r\n                    return fill.color\r\n                } else {\r\n                    return 'lightgrey'\r\n                }\r\n            } else {\r\n                return 'lightgrey'\r\n            }\r\n        } catch(err) {\r\n            console.log(\"Error getting Geo Fill for \", results.name)\r\n            return 'lightgrey'\r\n        } \r\n    }\r\n\r\n\r\n    const handleFill = (feature) => {\r\n        if (feature) {\r\n            let partyResults = getPartyResults(feature.properties.Name);\r\n            let fill = 'lightgrey'\r\n            if (partyResults) {\r\n                fill = getFillByResults(partyResults)\r\n            }\r\n            return {\r\n                fillColor: fill,\r\n                weight: 0.9,\r\n                color: 'black',\r\n                fillOpacity: 0.9\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleClick = (e) => {\r\n        // var mapbounds = e.target.getBounds();\r\n        var layerBounds = e.layer.getBounds();\r\n\r\n        if (currentBounds === layerBounds) {\r\n            e.layer.closeTooltip()\r\n        } else {\r\n            const map = mapRef.current.leafletElement;\r\n            setCurrentBounds(layerBounds)\r\n            map.fitBounds(layerBounds)\r\n            const clickedRiding = e.layer.feature.properties.Name\r\n            const partyResults = getPartyResults(clickedRiding)\r\n            props.handleSelectRiding(partyResults)\r\n            // setSelectedRiding(e.layer.feature.properties.Name)\r\n            e.layer.setStyle(selectedStyle)\r\n        }\r\n    }\r\n\r\n    const zoomToED = (ridingName) => {\r\n        try {\r\n            if (geoRef.current) {\r\n                const map = mapRef.current.leafletElement;\r\n                const geo = geoRef.current.leafletElement;\r\n                var findLayer = null;\r\n                geo.eachLayer(layer=>{\r\n                    if (layer.feature.properties.Name.toUpperCase() === ridingName.toUpperCase()) {\r\n                        findLayer = layer\r\n                    }\r\n                })\r\n                map.fitBounds(findLayer.getBounds())\r\n            }    \r\n        } catch (err) {\r\n            console.log('error zooming on riding')\r\n        }\r\n    }\r\n\r\n    const resetBounds = () => {\r\n        try {\r\n            const map = mapRef.current.leafletElement\r\n            map.fitBounds(initBounds)    \r\n        } catch (err) {\r\n\r\n        }\r\n    }\r\n\r\n    function highlightFeature(e) {\r\n        e.layer.setStyle(selectedStyle)\r\n    }\r\n\r\n    function resetFeature(e) {\r\n        if (props.selectedRiding) {\r\n            let layerName = e.layer.feature.properties.PED_Name_E\r\n            if (layerName.toUpperCase() !== props.selectedRiding.name.toUpperCase()) {\r\n                e.layer.setStyle(defaultStyle)\r\n            } \r\n        } else {\r\n            e.layer.setStyle(defaultStyle)\r\n        }\r\n    }\r\n\r\n    const getTooltipData = (feature, layer) => {\r\n        if (feature.properties ) {\r\n            try {\r\n                const featureData = getPartyResults(feature.properties.Name)\r\n                const featureColor = getFillByResults(featureData)\r\n                if (featureData && featureColor) {\r\n                    layer.bindTooltip(ReactDOMServer.renderToString(<Tooltip results={featureData} color={featureColor} />), {sticky: false, direction: 'top'})\r\n                }\r\n            } catch(e) {\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={classes.mapContainer}>\r\n            <Map \r\n                ref={mapRef} \r\n                zoomSnap={0.25}\r\n                zoomDelta={0.5}\r\n                // maxBounds={[[29.305561325527698, -130.53515625000003], [74.16408546675687, -90.54296875000001]]}\r\n                minZoom={3}    \r\n            >\r\n                <TileLayer\r\n                attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                url=\"https://{s}.basemaps.cartocdn.com/light_nolabels/{z}/{x}/{y}.png\"\r\n                />\r\n\r\n                {/* {geo && \r\n                <GeoJSON \r\n                    ref={geoRef} \r\n                    style={handleFill} \r\n                    data={geo} \r\n                    onClick={handleClick} \r\n                    onEachFeature={getTooltipData}\r\n                    onMouseOver={highlightFeature}\r\n                    onMouseOut={resetFeature}\r\n                />  \r\n                }    */}\r\n                <Control position=\"topleft\">\r\n                    <a id=\"zoomOut\" style={{color: 'black !important'}} className={`leaflet-control-zoom leaflet-bar ${classes.resetButton}`} onClick={resetBounds}>\r\n                        <ZoomOutMapIcon />\r\n\r\n                    </a>\r\n                </Control>\r\n            </Map>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default MapTest;","import React from 'react'\r\n\r\nimport {makeStyles} from '@material-ui/core'\r\n\r\nconst styles = makeStyles({\r\n    geoTooltip: {\r\n        fontFamily: 'Roboto, Ubuntu, Helvetica',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        transition: '1s'\r\n    },\r\n    tooltipName: {\r\n        fontSize: 20,\r\n\r\n        fontWeight: 'bolder',\r\n    },\r\n    tooltipPolls: {\r\n        fontSize: 14,\r\n        color: 'grey',\r\n        paddingBottom: 10\r\n    },\r\n    tooltipWinner:{\r\n        backgroundColor: props=>props.color,\r\n        color: 'white',\r\n        padding: 5, \r\n        '& #tooltipPartyCode': {\r\n            fontSize: 18\r\n        },\r\n        '& #tooltipWinnerName': {\r\n            fontSize: 20,\r\n            fontWeight: 'bolder'\r\n        }\r\n    }\r\n})\r\n\r\n\r\nconst Tooltip = (props) => {\r\n\r\n    const classes = styles(props)\r\n\r\n    return (\r\n        <div className={classes.geoTooltip}>\r\n            <div className={classes.tooltipName}>{props.results.name}</div>\r\n            <div className={classes.tooltipPolls}>{props.results.pollsReported}/{props.results.pollsTotal} polls reported</div>\r\n            {props.results.pollsReported > 0 && \r\n            <div className={classes.tooltipWinner} style={{backgroundColor: props.color}}>\r\n                <div id=\"tooltipPartycode\">{props.results.results[0].partyCode}</div>\r\n                <div id=\"tooltipWinnerName\">{props.results.results[0].name}</div>\r\n            </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Tooltip","import React from 'react';\r\nimport {makeStyles} from '@material-ui/core'\r\n\r\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\r\n\r\nconst styles = makeStyles(props=>({\r\n    resultsRoot: {\r\n        padding: 10,\r\n      \r\n    },\r\n    candidateRoot: {\r\n        position: 'relative',\r\n        display: 'flex', \r\n        flexDirection: 'row',\r\n        height: 120,\r\n        padding: '10px 0'\r\n    },\r\n    resultsInfo: {\r\n        display: 'flex', \r\n        alignItems: 'center',\r\n        justifyContent: 'space-between',\r\n        '& #pollsReported': {\r\n            fontSize: 12,\r\n            fontWeight: 'bolder'\r\n        },\r\n        '& #totalVotes': {\r\n            fontSize: 10,\r\n            color: 'darkslategrey'\r\n        }\r\n    },\r\n    imageDiv: {\r\n        height: props=>props.screensize < 700 ? 100 : 120,\r\n        position: 'relative',\r\n        marginBottom: 25,\r\n        minWidth: 50,\r\n        width: props=>props.screensize < 700 ? 50 : 70,\r\n        borderRadius: '8px',\r\n        overflow: 'hidden',\r\n        '& #partyCode': {\r\n            position: 'absolute', \r\n            bottom: 8,\r\n            color: 'white',\r\n            width: '100%',\r\n            textAlign: 'center'\r\n        },\r\n        '& img': {\r\n            width: '100%',\r\n            height: 'auto'\r\n        }\r\n    },\r\n    candidateLeftDiv: {\r\n        flex: 3, \r\n        display: 'flex', \r\n        flexDirection: 'column',\r\n        justifyContent: 'space-between',\r\n        padding: '10px 0 10px 10px',\r\n\r\n        '& #candidateIncumbent': {\r\n            fontSize: 13,\r\n            fontWeight: 'lighter'\r\n        }\r\n    },\r\n    candidateName: {\r\n        '& #candidateFirst': {\r\n            fontWeight: 'bolder',\r\n            fontSize: props=>props.screensize < 700 ? 12 : 14,\r\n\r\n        },\r\n        '& #candidateLast': {\r\n            fontWeight: 'bolder',\r\n            fontSize: props=>props.screensize < 700 ? 16 : 22,\r\n        }\r\n    }, \r\n    candidateRightDiv: {\r\n        flex: 2, \r\n        justifySelf: 'flex-end',\r\n        display: 'flex', \r\n        flexDirection: 'column',\r\n        padding: '10px 0',\r\n        justifyContent: 'space-between',\r\n        '& #candidateElected': {\r\n            display: 'flex', \r\n            alignItems: 'center',\r\n            justifyContent: 'flex-end',\r\n            fontSize: props=>props.screensize < 700 ? 12 : 14,\r\n        }\r\n    },\r\n    votesDiv: {\r\n        textAlign: 'right',\r\n        '& #votesPercent': {\r\n            fontSize: props=>props.screensize < 700 ? 16 : 22,\r\n            fontWeight: 'bolder'\r\n        },\r\n        '& #votesTotal': {\r\n            fontSize: props=>props.screensize < 700 ? 12 : 14,\r\n            fontWeight: 'lighter'\r\n        }\r\n    }\r\n}))\r\n\r\nconst Candidate = (props) => {\r\n    const {candidate, color} = props\r\n    const classes = styles(props);\r\n    var candidateName = candidate.name.split(' ')\r\n    var lastName = candidateName.pop();\r\n    return (\r\n        <div className={classes.candidateRoot}>\r\n            <div style={{backgroundColor: color}} className={classes.imageDiv}>\r\n                <img  alt=\"Candidate Headshot\" onError={(e) => { e.target.onError = null; e.target.src =`/img/images.jpg`}} src={`/image/${candidate.cachedHeadFilename}`}/>\r\n                <div id=\"partyCode\">{candidate.partyCode}</div>\r\n            </div>\r\n            <div className={classes.candidateLeftDiv}>\r\n                <div className={classes.candidateName}>\r\n                    <div id=\"candidateFirst\">{candidate.firstName}</div>\r\n                    <div id=\"candidateLast\" >{candidate.lastName}</div>\r\n                </div>\r\n                <div id=\"candidateIncumbent\">{candidate.isIncumbent && 'Incumbent'}</div>\r\n            </div>\r\n            <div className={classes.candidateRightDiv}>\r\n                <div className={classes.votesDiv}>\r\n                    <div id='votesPercent'>{candidate.percent}%</div>\r\n                    <div id='votesTotal'>{candidate.votes.toLocaleString('en')} total votes</div>\r\n                </div>\r\n                {candidate.isElected ? <div id=\"candidateElected\">\r\n                    <CheckCircleIcon style={{paddingRight: 5, fontSize: 14, color: 'green'}} /> Elected\r\n                </div>\r\n                :\r\n                <div style={{fontSize: 14}}/>\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst Results = (props) => {\r\n    \r\n    const classes = styles();\r\n    const {data} = props;\r\n\r\n    const getPartyColor = (candidate) => {\r\n        let color = \"#595b5b\" \r\n        if (props.parties) {\r\n            let findParty = props.parties.find(party=>party.nameShort === candidate.partyCode)\r\n            if (findParty) {\r\n                color = findParty.color\r\n            }\r\n        }\r\n        return color\r\n\r\n    }\r\n\r\n    return (\r\n        <div className={classes.resultsRoot}>\r\n            {props.data && \r\n        <>\r\n            <div className={classes.resultsInfo}>\r\n                <div id=\"pollsReported\">{data.pollsReported}/{data.pollsTotal} polls reported</div>\r\n                <div id=\"totalVotes\">{data.votes.toLocaleString('en')} total votes</div>\r\n            </div>\r\n                <div>\r\n                    {props.data.results.map((candidate, i)=> {\r\n                        let partyColor = getPartyColor(candidate);\r\n                        return <Candidate screensize={props.screensize} key={i} color={partyColor} candidate={candidate}/>\r\n                    })}\r\n                </div>    \r\n            </>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Results","import React, {useState, useEffect} from 'react'\r\n\r\nimport {makeStyles} from '@material-ui/core';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\n\r\nimport {CSSTransition} from 'react-transition-group'\r\n\r\nimport Results from './Results'\r\n\r\nconst styles = makeStyles({\r\n    sidebar: {\r\n        flex: 2, \r\n        position: 'relative',\r\n        display: 'flex',\r\n        overflow: 'hidden'\r\n    },\r\n    title: {\r\n        width: '100%',\r\n        top: 0,\r\n        backgroundColor: 'darkgrey',\r\n        color: 'white',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        minHeight: 50,\r\n        paddingLeft: 10,\r\n        fontWeight: 'bolder',\r\n    },\r\n    content: {\r\n        marginBottom: 10,\r\n        height: 'calc(100% - 50px)',\r\n        overflowX: 'hidden',\r\n        overflowY: 'scroll'\r\n\r\n    },\r\n    LocationButton: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        minHeight: 50,\r\n        paddingLeft: 10,\r\n        justifyContent: 'space-between',\r\n        '&:hover': {\r\n            backgroundColor: 'lightgrey',\r\n            cursor: 'pointer'\r\n        }\r\n    }\r\n})\r\n\r\nconst Sidebar = (props) =>  {\r\n    const [arrow, toggleArrow] = useState(0)\r\n    const classes=styles();\r\n    const [menu, setMenu] = useState('location')\r\n    const [results, setResults] = useState(null)\r\n\r\n    useEffect(()=>{\r\n        if (props.results) {\r\n            setResults(props.results)\r\n            setMenu('results')\r\n\r\n        }\r\n    },[props.results])\r\n\r\n\r\n    const handleSelectRiding = (results) => {\r\n        props.handleSelectRiding(results);\r\n        setResults(results); \r\n        setMenu('results')\r\n    }   \r\n\r\n    const LocationButton = (props) => {\r\n        return (\r\n            <div\r\n                className={`${classes.LocationButton} menu-item`}\r\n                onMouseEnter={()=>toggleArrow(props.resultId)}\r\n                onMouseLeave={()=>toggleArrow(0)}\r\n                onClick={()=>handleSelectRiding(props.resultData)}\r\n            >\r\n                {props.children}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const handleBack = () => {\r\n        setMenu('location')\r\n        props.handleSelectRiding(null)\r\n    }\r\n\r\n\r\n    return (\r\n        <div id=\"widgetSidebar\" className={classes.sidebar}>\r\n            <div style={{position: 'absolute', top: 0, height: '50px', width: '100%', backgroundColor: 'darkgrey'}}/>\r\n            <CSSTransition \r\n                in={menu===\"location\"} \r\n                timeout={500}\r\n                unmountOnExit\r\n                classNames=\"menu-primary\"\r\n            >\r\n                <div className=\"menu\">\r\n                    <div className={classes.title}>\r\n                        SELECT A RIDING\r\n                    </div>\r\n                    <div className={classes.content}>\r\n                    {\r\n                        props.data && props.data.data.sort((a,b)=>{\r\n                            if (a.name > b.name) {\r\n                                return 1\r\n                            } else return -1\r\n                        })\r\n                        .map((result)=> {\r\n                            return (\r\n                                <LocationButton key={result.id} resultId={result.id} resultData={result} >{result.name}{arrow === result.id && <ChevronRightIcon/>}</LocationButton>\r\n                            )\r\n                        })\r\n                    }\r\n                </div>\r\n                </div>\r\n            </CSSTransition>\r\n            <CSSTransition \r\n                in={menu===\"results\"} \r\n                unmountOnExit\r\n                timeout={500}\r\n                classNames=\"menu-secondary\"\r\n            >\r\n                <div className=\"menu\">\r\n                    <div className={classes.title}>\r\n                        <ChevronLeftIcon onClick={handleBack} style={{cursor: 'pointer'}}/>{results && results.name.toUpperCase()}\r\n                    </div>\r\n                    <div className={classes.content}>\r\n                        {props.data && menu === 'results' && \r\n                            <Results \r\n                                screensize={props.small}\r\n                                data={results}\r\n                                parties={props.parties}\r\n                            />\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </CSSTransition>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Sidebar","import React from 'react'\r\n\r\nconst LoadingAnimation = () => {\r\n    return (\r\n        <div className=\"spinnerDiv\">\r\n            <div className=\"spinnerText\">Loading Map..</div>\r\n            <div className=\"spinner\">\r\n                <div className=\"double-bounce1\"></div>\r\n                <div className=\"double-bounce2\"></div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default LoadingAnimation","import React from 'react';\r\n\r\nconst Pictureloader = React.memo(props => {\r\n    const {data} = props\r\n    return <div style={{display: 'none'}}>\r\n        {data.data.map(riding=>{\r\n            return riding.results.map(candidate=>{\r\n                return <img  alt=\"Candidate Headshot\" onError={(e) => { e.target.onError = null; e.target.src =`/img/images.jpg`}} src={`/image/${candidate.cachedHeadFilename}`}/>\r\n            })\r\n        })}\r\n    </div>\r\n})\r\n\r\nexport default Pictureloader\r\n","import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport {makeStyles} from '@material-ui/core'\nimport axios from 'axios'\nimport 'babel-polyfill'\nimport 'react-app-polyfill/ie11';\n\n\n// import { TransformWrapper, TransformComponent } from \"react-zoom-pan-pinch\";\n\n// import Map from './components/Map.js'\nimport MapDiv from './components/MapTest'\nimport Sidebar from './components/Sidebar.js'\nimport LoadingAnimation from './components/LoadingAnimation'\nimport Pictureloader from './components/Pictureloader'\n\nrequire('es6-promise/auto');\n\nconst styles = makeStyles({\n  app: {\n    height: '100%',\n    display: 'flex',\n    flexDirection: 'row',\n    \n  }\n})\n\nfunction App() {\n\n  const [data, setData] = useState(null)\n  const [loading, toggleLoading] = useState(true)\n  const [parties, setParties] = useState(null)\n  const [selectedResults, setSelectedResults] = useState(null)\n  const [timer, setTimer] = useState(300000)\n  const [screensize, setScreenSize] = useState(window.innerWidth)\n\n  const classes = styles();\n\n  useEffect(()=>{\n    console.log(`Updating every ${timer/1000} seconds`)\n    getData()\n    startTimer()\n  },[])\n\n  useEffect(()=> {\n    getResultsFromURL()\n  }, [loading])\n\n  const startTimer = () => {\n      setInterval(()=>{\n          getData();\n      }, timer);\n    }\n\n  const getData = () => {\n    console.log(\"fetching\")\n    axios.get('/fullresults')\n      .then(res=>{\n        if (res.status === 200) {\n          setData(res.data);\n          toggleLoading(false);\n        }\n      })\n      .catch(err=>console.log(\"Error fetching FULLELECTIONDATA, check your env variables and try again\", err))\n    \n    axios.get('/overallresults')\n      .then(res=>{\n        if (res.status === 200) {\n          setParties(res.data.partyResults)\n        }\n      })\n      .catch(err=>console.log(\"Error fetching OVERALLRESULTS, check your env variables and try again\"))\n    \n  }\n\n  const getResultsFromURL = () => {\n    try {\n      let hash = window.location.hash\n      if (hash) {\n        hash = decodeURI(hash.replace('#', ''))\n        let name = hash\n        if (data) {\n          const result = data.data.find(riding=>{\n            return riding.name.toLowerCase() === name.toLowerCase() \n          })\n          if (result) {\n            setSelectedResults(result)\n          }\n        }\n      }\n  \n    } catch (err) {\n      console.log('could not find riding by hash')\n    }\n    \n\n  }\n\n  const handleSelectRiding = (results) => {\n    setSelectedResults(results)\n  }\n\n  return (\n    <div id={'map-widget-app'} className={classes.app}>\n      {!loading  ? <MapDiv \n        data={data}\n        parties={parties}\n        handleSelectRiding={handleSelectRiding}\n        selectedRiding={selectedResults}\n        />\n        :\n        <LoadingAnimation/>\n      }\n        <Sidebar \n          data={data} \n          parties={parties}\n          results={selectedResults} \n          handleSelectRiding={handleSelectRiding}\n          small={screensize}\n          />\n        {/* {!loading && <Pictureloader data={data}/>} */}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}