{"version":3,"sources":["components/Map.js","components/MapTest.js","components/Results.js","components/Sidebar.js","App.js","serviceWorker.js","index.js"],"names":["makeStyles","map","display","height","flex","styles","mapContainer","position","resetButton","boxShadow","width","fontSize","alignItems","justifyContent","borderRadius","background","cursor","color","MapTest","props","useState","lat","lng","zoom","initBounds","setInitBounds","geo","setgeo","mapRef","useRef","geoRef","classes","useEffect","console","log","fetch","then","res","json","bounds","L","geoJSON","getBounds","current","leafletElement","fitBounds","handleFill","data","selectedRiding","zoomToED","name","getPartyResults","EDName","find","ed","toUpperCase","e","feature","partyResults","properties","Constituen","fill","results","parties","party","votes","nameShort","partyCode","colour","getFillByResults","fillColor","weight","fillOpacity","ridingName","findLayer","eachLayer","layer","className","ref","maxBounds","minZoom","TileLayer","attribution","url","GeoJSON","style","onClick","target","layerBounds","clickedRiding","handleSelectRiding","id","resultsRoot","padding","candidateRoot","flexDirection","resultsInfo","fontWeight","imageDiv","paddingBottom","bottom","textAlign","backgroundColor","candidateLeftDiv","candidateName","candidateRightDiv","justifySelf","votesDiv","Candidate","candidate","src","split","length","isIncumbent","percent","toLocaleString","elected","paddingRight","Results","pollsReported","pollsTotal","partyColor","findParty","getPartyColor","sidebar","overflow","title","top","paddingLeft","content","marginBottom","overflowX","overflowY","LocationButton","Sidebar","arrow","toggleArrow","menu","setMenu","setResults","onMouseEnter","resultId","onMouseLeave","resultData","children","CSSTransition","in","timeout","unmountOnExit","classNames","result","app","App","setData","toggleLoading","setParties","selectedResults","setSelectedResults","getData","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"iSAaeA,YAAW,CACtBC,IAAK,CACDC,QAAS,OACTC,OAAQ,OACRC,KAAM,K,yECRRC,EAAQL,YAAW,CACrBM,aAAc,CACVF,KAAM,EACNG,SAAU,YAEdC,YAAa,CACTN,QAAS,OACTO,UAAW,6BACXN,OAAQ,GACRO,MAAO,GACPC,SAAU,GACVC,WAAY,SACZC,eAAgB,SAChBC,aAAc,MACdC,WAAY,UACZC,OAAQ,UACRC,MAAO,WA8IAC,EAxIE,SAACC,GAAW,IAAD,EACQC,mBAAS,CAACC,IAAK,GAAIC,KAAM,IAAKC,KAAM,IAD5C,gCAEYH,sBAFZ,mBAEjBI,EAFiB,KAELC,EAFK,OAGFL,mBAAS,MAHP,mBAGjBM,EAHiB,KAGZC,EAHY,KAIlBC,EAASC,iBAAO,MAChBC,EAASD,iBAAO,MAEhBE,EAAU1B,IAEhB2B,qBAAU,WACFJ,IAGAK,QAAQC,IAAI,QACZC,MAAM,oCACDC,MAAK,SAAAC,GAAG,OAAEA,EAAIC,UACdF,MAAK,SAAAE,GACFX,EAAOW,GACP,IAAIC,EAASC,IAAEC,QAAQH,GAAMI,YAC7BjB,EAAcc,GACdX,EAAOe,QAAQC,eAAeC,UAAUN,GACxCN,QAAQC,IAAIM,IAAEC,QAAQH,UAGnC,IAEHN,qBAAU,WACNc,MACD,CAAC3B,EAAM4B,OAEVf,qBAAU,WACNC,QAAQC,IAAI,iBAAkBf,EAAM6B,gBAChC7B,EAAM6B,gBACNC,EAAS9B,EAAM6B,eAAeE,QAEnC,CAAC/B,EAAM6B,iBAEV,IAAMG,EAAkB,SAACC,GACrB,IACI,GAAIjC,EAAM4B,KAIN,OAHmB5B,EAAM4B,KAAKA,KAAKM,MAAK,SAAAC,GAAE,OACtCA,EAAGJ,KAAKK,gBAAkBH,EAAOG,iBAI3C,MAAOC,GACLvB,QAAQC,IAAI,gCAoBdY,EAAa,SAACW,GAChB,GAAIA,EAAS,CAET,IAAIC,EAAeP,EAAgBM,EAAQE,WAAWC,YAElDC,EAAO,YAKX,OAJIH,IACAG,EAvBa,SAACC,GACtB,GAAG3C,EAAM4C,QAAS,CACd,IAAIF,EAAO1C,EAAM4C,QAAQhB,KAAKM,MAAK,SAAAW,GAC/B,GAAIF,EAAQA,QAAQ,GAAGG,MAAQ,EAC3B,OAAOD,EAAME,YAAcJ,EAAQA,QAAQ,GAAGK,aAGtD,OAAIN,EACOA,EAAKO,OAEL,aAaAC,CAAiBX,IAGrB,CACHY,UAAWT,EACXU,OAAQ,GACRtD,MAAO,QACPuD,YAAa,MAenBvB,EAAW,SAACwB,GACd,IAAMxE,EAAM2B,EAAOe,QAAQC,eACrBlB,EAAMI,EAAOa,QAAQC,eACvB8B,EAAY,KAChBhD,EAAIiD,WAAU,SAAAC,GACNA,EAAMnB,QAAQE,WAAWC,aAAea,EAAWlB,gBACnDmB,EAAYE,MAGpB3E,EAAI4C,UAAU6B,EAAUhC,cAQ5B,OACI,yBAAKmC,UAAW9C,EAAQzB,cACpB,kBAAC,IAAD,CACIwE,IAAKlD,EACLmD,UAAW,CAAC,CAAC,oBAAqB,oBAAqB,CAAC,mBAAoB,oBAC5EC,QAAS,GAET,kBAACC,EAAA,EAAD,CACAC,YAAY,0EACZC,IAAI,qEAGHzD,GAAO,kBAAC0D,EAAA,EAAD,CAASN,IAAKhD,EAAQuD,MAAOvC,EAAYC,KAAMrB,EAAK4D,QAvCpD,SAAC9B,GACJA,EAAE+B,OAAO7C,YAAtB,IACI8C,EAAchC,EAAEoB,MAAMlC,YACdd,EAAOe,QAAQC,eACvBC,UAAU2C,GACd,IAAMC,EAAgBjC,EAAEoB,MAAMnB,QAAQE,WAAWC,WAC3CF,EAAeP,EAAgBsC,GACrCtE,EAAMuE,mBAAmBhC,MAiCjB,kBAAC,IAAD,CAASnD,SAAS,WACd,uBAAGoF,GAAG,UAAUN,MAAO,CAACpE,MAAO,oBAAqB4D,UAAS,+BAA0B9C,EAAQvB,aAAe8E,QAnB1G,WACJ1D,EAAOe,QAAQC,eACvBC,UAAUrB,KAkBE,kBAAC,IAAD,W,4DCzJlBnB,EAASL,YAAW,CACtB4F,YAAa,CACTC,QAAS,IAGbC,cAAe,CACXvF,SAAU,WACVL,QAAS,OACT6F,cAAe,MACf5F,OAAQ,IACR0F,QAAS,UAEbG,YAAa,CACT9F,QAAS,OACTU,WAAY,SACZC,eAAgB,gBAChB,mBAAoB,CAChBF,SAAU,GACVsF,WAAY,UAEhB,gBAAiB,CACbtF,SAAU,GACVM,MAAO,kBAGfiF,SAAU,CACN/F,OAAQ,OACRI,SAAU,WACV4F,cAAe,GACfzF,MAAO,GACP,eAAgB,CACZH,SAAU,WACV6F,OAAQ,GACRnF,MAAO,QACPP,MAAO,OACP2F,UAAW,UAEf,QAAS,CACLvF,aAAc,MACdwF,gBAAiB,MACjBH,cAAe,GACfzF,MAAO,OACPP,OAAQ,SAGhBoG,iBAAkB,CACdnG,KAAM,EACNF,QAAS,OACT6F,cAAe,SACflF,eAAgB,gBAChBgF,QAAS,mBAET,wBAAyB,CACrBlF,SAAU,GACVsF,WAAY,YAGpBO,cAAe,CACX,oBAAqB,CACjBP,WAAY,SACZtF,SAAU,IAEd,mBAAoB,CAChBsF,WAAY,SACZtF,SAAU,KAGlB8F,kBAAmB,CACfrG,KAAM,EACNsG,YAAa,WACbxG,QAAS,OACT6F,cAAe,SACfF,QAAS,SACThF,eAAgB,gBAChB,sBAAuB,CACnBX,QAAS,OACTU,WAAY,SACZC,eAAgB,WAChBF,SAAU,KAGlBgG,SAAU,CACNN,UAAW,QACX,kBAAmB,CACf1F,SAAU,GACVsF,WAAY,UAEhB,gBAAiB,CACbtF,SAAU,GACVsF,WAAY,cAKlBW,EAAY,SAACzF,GAAW,IACnB0F,EAAoB1F,EAApB0F,UACD9E,GADqBZ,EAATF,MACFZ,KAChB,OACI,yBAAKwE,UAAW9C,EAAQ+D,eACpB,yBAAKjB,UAAW9C,EAAQmE,UACpB,yBAAKb,MAAO,CAACiB,gBAAiBnF,EAAMF,OAAQ6F,IAAI,gBAChD,yBAAKnB,GAAG,aAAakB,EAAU1C,YAEnC,yBAAKU,UAAW9C,EAAQwE,kBACpB,yBAAK1B,UAAW9C,EAAQyE,eACpB,yBAAKb,GAAG,kBAAkBkB,EAAU3D,KAAK6D,MAAM,KAAK,IACpD,yBAAKpB,GAAG,iBAAkBkB,EAAU3D,KAAK6D,MAAM,KAAKF,EAAU3D,KAAK6D,MAAM,KAAKC,OAAS,KAE3F,yBAAKrB,GAAG,sBAAsBkB,EAAUI,aAAe,cAE3D,yBAAKpC,UAAW9C,EAAQ0E,mBACpB,yBAAK5B,UAAW9C,EAAQ4E,UACpB,yBAAKhB,GAAG,gBAAgBkB,EAAUK,QAAlC,KACA,yBAAKvB,GAAG,cAAckB,EAAU5C,MAAMkD,eAAe,MAArD,iBAEHN,EAAUO,QAAU,yBAAKzB,GAAG,oBACzB,kBAAC,IAAD,CAAiBN,MAAO,CAACgC,aAAc,EAAG1G,SAAU,GAAIM,MAAO,WAD9C,YAIrB,yBAAKoE,MAAO,CAAC1E,SAAU,SA8CxB2G,EAtCC,SAACnG,GAEb,IAAMY,EAAU1B,IACT0C,EAAQ5B,EAAR4B,KAeP,OACI,yBAAK8B,UAAW9C,EAAQ6D,aACnBzE,EAAM4B,MACX,oCACI,yBAAK8B,UAAW9C,EAAQiE,aACpB,yBAAKL,GAAG,iBAAiB5C,EAAKwE,cAA9B,IAA8CxE,EAAKyE,WAAnD,mBACA,yBAAK7B,GAAG,cAAc5C,EAAKkB,MAAMkD,eAAe,MAAhD,iBAEA,6BACKhG,EAAM4B,KAAKe,QAAQ7D,KAAI,SAAA4G,GACpB,IAAIY,EAvBF,SAACZ,GACnB,IAAI5F,EAAQ,UACZ,GAAIE,EAAM4C,QAAQhB,KAAM,CACpBd,QAAQC,IAAIf,EAAM4C,QAAQhB,MAC1B,IAAI2E,EAAYvG,EAAM4C,QAAQhB,KAAKM,MAAK,SAAAW,GAAK,OAAEA,EAAME,YAAc2C,EAAU1C,aACzEuD,IACAzG,EAAQyG,EAAUtD,QAG1B,OAAOnD,EAc0B0G,CAAcd,GAC/B,OAAO,kBAAC,EAAD,CAAW5F,MAAOwG,EAAYZ,UAAWA,WCvJlExG,EAASL,YAAW,CACtB4H,QAAS,CACLxH,KAAM,EACNG,SAAU,WACVL,QAAS,OACT2H,SAAU,UAEdC,MAAO,CACHpH,MAAO,OACPqH,IAAK,EACLzB,gBAAiB,WACjBrF,MAAO,QACPf,QAAS,OACTU,WAAY,SACZT,OAAQ,GACR6H,YAAa,GACb/B,WAAY,UAIhBgC,QAAS,CACLC,aAAc,GACd/H,OAAQ,oBACRgI,UAAW,SACXC,UAAW,UAGfC,eAAgB,CACZnI,QAAS,OACTU,WAAY,SACZT,OAAQ,GACR6H,YAAa,GACbnH,eAAgB,gBAChB,UAAW,CACPyF,gBAAiB,YACjBtF,OAAQ,cA0FLsH,EArFC,SAACnH,GAAY,IAAD,EACEC,mBAAS,mBADX,mBACjB0G,EADiB,aAEK1G,mBAAS,IAFd,mBAEjBmH,EAFiB,KAEVC,EAFU,KAGlBzG,EAAQ1B,IAHU,EAIAe,mBAAS,YAJT,mBAIjBqH,EAJiB,KAIXC,EAJW,OAKMtH,mBAAS,MALf,mBAKjB0C,EALiB,KAKR6E,EALQ,KAOxB3G,qBAAU,WACFb,EAAM2C,UACN7B,QAAQC,IAAI,mBACZyG,EAAWxH,EAAM2C,SACjB4E,EAAQ,cAGd,CAACvH,EAAM2C,UAGT,IAAM4B,EAAqB,SAAC5B,GACxB3C,EAAMuE,mBAAmB5B,GACzB6E,EAAW7E,GACX4E,EAAQ,YAGNL,EAAiB,SAAClH,GACpB,OACI,yBACI0D,UAAS,UAAK9C,EAAQsG,eAAb,cACTO,aAAc,kBAAIJ,EAAYrH,EAAM0H,WACpCC,aAAc,kBAAIN,EAAY,IAC9BlD,QAAS,kBAAII,EAAmBvE,EAAM4H,cAErC5H,EAAM6H,WAMnB,OACI,yBAAKrD,GAAG,gBAAgBd,UAAW9C,EAAQ6F,SACvC,yBAAKvC,MAAO,CAAC9E,SAAU,WAAYwH,IAAK,EAAG5H,OAAQ,OAAQO,MAAO,OAAQ4F,gBAAiB,cAC3F,kBAAC2C,EAAA,EAAD,CACIC,GAAW,aAAPT,EACJU,QAAS,IACTC,eAAa,EACbC,WAAW,gBAEX,yBAAKxE,UAAU,QACX,yBAAKA,UAAW9C,EAAQ+F,OACnBA,EAAMvE,eAEX,yBAAKsB,UAAW9C,EAAQkG,SAEpB9G,EAAM4B,MAAQ5B,EAAM4B,KAAKA,KAAK9C,KAAI,SAAAqJ,GAC9B,OACI,kBAACjB,EAAD,CAAgBQ,SAAUS,EAAO3D,GAAIoD,WAAYO,GAAUA,EAAOpG,KAAMqF,IAAUe,EAAO3D,IAAM,kBAAC,IAAD,aAOnH,kBAACsD,EAAA,EAAD,CACIC,GAAW,YAAPT,EACJW,eAAa,EACbD,QAAS,IACTE,WAAW,kBAEX,yBAAKxE,UAAU,QACX,yBAAKA,UAAW9C,EAAQ+F,OACpB,kBAAC,IAAD,CAAiBxC,QAAS,kBAAIoD,EAAQ,aAAarD,MAAO,CAACrE,OAAQ,aAAc8C,GAAWA,EAAQZ,KAAKK,eAE7G,yBAAKsB,UAAW9C,EAAQkG,SACnB9G,EAAM4B,MAAiB,YAAT0F,GACX,kBAAC,EAAD,CACI1F,KAAMe,EACNC,QAAS5C,EAAM4C,eChHzC1D,EAASL,YAAW,CACxBuJ,IAAK,CACHpJ,OAAQ,OACRD,QAAS,OACT6F,cAAe,SA6DJyD,MAzDf,WAAgB,IAAD,EAEWpI,mBAAS,MAFpB,mBAEN2B,EAFM,KAEA0G,EAFA,OAGoBrI,oBAAS,GAH7B,mBAGGsI,GAHH,aAIiBtI,mBAAS,MAJ1B,mBAIN2C,EAJM,KAIG4F,EAJH,OAKiCvI,mBAAS,MAL1C,mBAKNwI,EALM,KAKWC,EALX,KAOP9H,EAAU1B,IAEhB2B,qBAAU,kBACR8H,MACD,IAED,IAAMA,EAAU,WACd3H,MAAM,iBACHC,MAAK,SAAAC,GAAG,OAAEA,EAAIC,UACdF,MAAK,SAAAE,GACJmH,EAAQnH,GACRoH,GAAc,MAElBvH,MAAM,cACHC,MAAK,SAAAC,GAAG,OAAEA,EAAIC,UACdF,MAAK,SAAAE,GACJqH,EAAWrH,OAIXoD,EAAqB,SAAC5B,GAC1B7B,QAAQC,IAAI4B,GACZ+F,EAAmB/F,IAGrB,OACE,yBAAK6B,GAAI,iBAAkBd,UAAW9C,EAAQwH,KAC5C,kBAAC,EAAD,CACExG,KAAMA,EACNgB,QAASA,EACT2B,mBAAoBA,EACpB1C,eAAgB4G,IAUhB,kBAAC,EAAD,CACE7G,KAAMA,EACNgB,QAASA,EACTD,QAAS8F,EACTlE,mBAAoBA,MC7DVqE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvI,MAAK,SAAAwI,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9I,QAAQ8I,MAAMA,EAAMC,c","file":"static/js/main.c5410435.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\n\r\nimport {makeStyles} from '@material-ui/core'\r\n\r\nimport {\r\n    ComposableMap,\r\n    Geographies,\r\n    Geography,\r\n    ZoomableGroup\r\n  } from \"react-simple-maps\";\r\n\r\nimport { TransformWrapper, TransformComponent } from \"react-zoom-pan-pinch\";\r\n\r\nconst styles = makeStyles({\r\n    map: {\r\n        display: 'flex',\r\n        height: '100%',\r\n        flex: 3,\r\n    }\r\n});\r\n\r\nconst Map = (props) => {\r\n\r\n    const [zoomCenter, setZoomCenter] = useState({zoom: 1500, center: [-105, 54.5]})\r\n    const classes = styles()\r\n\r\n\r\n    const getFill =(geo) => {\r\n        if (!geo.ConCode) {\r\n            if (geo.name === 'United States of America') {\r\n                return 'lightgrey'\r\n            }\r\n            return 'darkgrey'\r\n        }\r\n        else return 'slategrey'\r\n    }\r\n\r\n    return (\r\n        <div className={classes.map} >\r\n            <TransformComponent>\r\n            <ComposableMap style={{width: '100%', overflow: 'visible', height: '100%'}} projection=\"geoMercator\" projectionConfig={{center: zoomCenter.center, scale: zoomCenter.zoom}}>\r\n                    <Geographies geography={'/SASK_Union_proj_lakes.json'}>\r\n                        {({geographies})=>\r\n                            geographies.map((geo, i)=>{\r\n                                const fill = getFill(geo.properties)\r\n                                return <Geography \r\n                                    key={i}\r\n                                    geography={geo}\r\n                                    fill={fill}\r\n                                    style={{\r\n                                        default: {\r\n                                            outline: 'none'\r\n                                        },\r\n                                        pressed: {\r\n                                            outline: 'none'\r\n                                        },\r\n                                        hover: {\r\n                                            outline: 'none',\r\n                                            opacity: '0.9'\r\n                                        }\r\n                                    }}\r\n                                />\r\n                            })\r\n                        }\r\n                    </Geographies>\r\n            </ComposableMap>\r\n            </TransformComponent>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Map;","import React, { useState, useEffect, useRef } from 'react'\r\nimport { Map, MapControl, TileLayer, GeoJSON, Marker, Popup } from 'react-leaflet'\r\nimport Control from 'react-leaflet-control'\r\nimport L from 'leaflet'\r\n\r\nimport ZoomOutMapIcon from '@material-ui/icons/ZoomOutMap';\r\n\r\nimport {makeStyles} from '@material-ui/core'\r\n\r\nconst styles= makeStyles({\r\n    mapContainer: {\r\n        flex: 4,\r\n        position: 'relative'\r\n    },\r\n    resetButton: {\r\n        display: 'flex',\r\n        boxShadow: '0 1px 4px rgba(0,0,0,0.65)',\r\n        height: 26,\r\n        width: 26,\r\n        fontSize: 14,\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        borderRadius: '4px',\r\n        background: '#FFFFFF',\r\n        cursor: 'pointer',\r\n        color: 'black'\r\n        \r\n    }\r\n})\r\n\r\n\r\n const MapTest = (props) => {\r\n    const [position, setPosition] = useState({lat: 54, lng: -105, zoom: 5});\r\n    const [initBounds, setInitBounds] = useState();\r\n    const [geo, setgeo] = useState(null);\r\n    const mapRef = useRef(null);\r\n    const geoRef = useRef(null)\r\n\r\n    const classes = styles();\r\n\r\n    useEffect(()=> {\r\n        if(!mapRef) {return}\r\n        \r\n        else {\r\n            console.log('here')\r\n            fetch('/SASK_Constituency_boundary.json')\r\n                .then(res=>res.json())\r\n                .then(json=>{\r\n                    setgeo(json)\r\n                    var bounds = L.geoJSON(json).getBounds()\r\n                    setInitBounds(bounds)\r\n                    mapRef.current.leafletElement.fitBounds(bounds)\r\n                    console.log(L.geoJSON(json))\r\n                })\r\n        }   \r\n    }, [])\r\n\r\n    useEffect(()=>{\r\n        handleFill();\r\n    }, [props.data])\r\n\r\n    useEffect(()=> {\r\n        console.log('zoom to riding', props.selectedRiding)\r\n        if (props.selectedRiding) {\r\n            zoomToED(props.selectedRiding.name)\r\n        }\r\n    }, [props.selectedRiding])\r\n\r\n    const getPartyResults = (EDName) => {\r\n        try {\r\n            if (props.data) {\r\n                let partyResults = props.data.data.find(ed=>\r\n                    ed.name.toUpperCase() === EDName.toUpperCase()\r\n                )\r\n                return partyResults\r\n            }\r\n        } catch (e) {\r\n            console.log(\"Couldn't get party results\")\r\n        }\r\n    }\r\n    \r\n    const getFillByResults = (results) =>{\r\n        if(props.parties) {\r\n            let fill = props.parties.data.find(party=>{\r\n                if (results.results[0].votes > 0) {   \r\n                    return party.nameShort === results.results[0].partyCode\r\n                }\r\n            })\r\n            if (fill) {\r\n                return fill.colour\r\n            } else {\r\n                return 'lightgrey'\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    const handleFill = (feature) => {\r\n        if (feature) {\r\n\r\n            let partyResults = getPartyResults(feature.properties.Constituen);\r\n\r\n            let fill = 'lightgrey'\r\n            if (partyResults) {\r\n                fill = getFillByResults(partyResults)\r\n            }\r\n\r\n            return {\r\n                fillColor: fill,\r\n                weight: 0.9,\r\n                color: 'black',\r\n                fillOpacity: 0.8\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleClick = (e) => {\r\n        var bounds = e.target.getBounds();\r\n        var layerBounds = e.layer.getBounds();\r\n        const map = mapRef.current.leafletElement;\r\n        map.fitBounds(layerBounds)\r\n        const clickedRiding = e.layer.feature.properties.Constituen\r\n        const partyResults = getPartyResults(clickedRiding)\r\n        props.handleSelectRiding(partyResults)\r\n    }\r\n\r\n    const zoomToED = (ridingName) => {\r\n        const map = mapRef.current.leafletElement;\r\n        const geo = geoRef.current.leafletElement;\r\n        var findLayer = null;\r\n        geo.eachLayer(layer=>{\r\n            if (layer.feature.properties.Constituen === ridingName.toUpperCase()) {\r\n                findLayer = layer\r\n            }\r\n        })\r\n        map.fitBounds(findLayer.getBounds())\r\n    }\r\n\r\n    const resetBounds = () => {\r\n        const map = mapRef.current.leafletElement\r\n        map.fitBounds(initBounds)\r\n    }\r\n\r\n    return (\r\n        <div className={classes.mapContainer}>\r\n            <Map \r\n                ref={mapRef} \r\n                maxBounds={[[29.305561325527698, -130.53515625000003], [74.16408546675687, -90.54296875000001]]}\r\n                minZoom={3}    \r\n            >\r\n                <TileLayer\r\n                attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                url=\"https://{s}.basemaps.cartocdn.com/light_nolabels/{z}/{x}/{y}.png\"\r\n                />\r\n\r\n                {geo && <GeoJSON ref={geoRef} style={handleFill} data={geo} onClick={handleClick} />  }   \r\n                <Control position=\"topleft\">\r\n                    <a id=\"zoomOut\" style={{color: 'black !important'}} className={`leaflet-control-zoom ${classes.resetButton}`} onClick={resetBounds}>\r\n                        <ZoomOutMapIcon />\r\n\r\n                    </a>\r\n                </Control>\r\n            </Map>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default MapTest;","import React from 'react';\r\nimport {makeStyles} from '@material-ui/core'\r\n\r\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\r\n\r\nconst styles = makeStyles({\r\n    resultsRoot: {\r\n        padding: 10,\r\n      \r\n    },\r\n    candidateRoot: {\r\n        position: 'relative',\r\n        display: 'flex', \r\n        flexDirection: 'row',\r\n        height: 120,\r\n        padding: '10px 0'\r\n    },\r\n    resultsInfo: {\r\n        display: 'flex', \r\n        alignItems: 'center',\r\n        justifyContent: 'space-between',\r\n        '& #pollsReported': {\r\n            fontSize: 14,\r\n            fontWeight: 'bolder'\r\n        },\r\n        '& #totalVotes': {\r\n            fontSize: 12,\r\n            color: 'darkslategrey'\r\n        }\r\n    },\r\n    imageDiv: {\r\n        height: '100%',\r\n        position: 'relative',\r\n        paddingBottom: 25,\r\n        width: 70,\r\n        '& #partyCode': {\r\n            position: 'absolute', \r\n            bottom: 32,\r\n            color: 'white',\r\n            width: '100%',\r\n            textAlign: 'center'\r\n        },\r\n        '& img': {\r\n            borderRadius: '8px',\r\n            backgroundColor: 'red',\r\n            paddingBottom: 30,\r\n            width: '100%',\r\n            height: 'auto'\r\n        }\r\n    },\r\n    candidateLeftDiv: {\r\n        flex: 3, \r\n        display: 'flex', \r\n        flexDirection: 'column',\r\n        justifyContent: 'space-between',\r\n        padding: '10px 0 10px 10px',\r\n\r\n        '& #candidateIncumbent': {\r\n            fontSize: 13,\r\n            fontWeight: 'lighter'\r\n        }\r\n    },\r\n    candidateName: {\r\n        '& #candidateFirst': {\r\n            fontWeight: 'bolder',\r\n            fontSize: 14\r\n        },\r\n        '& #candidateLast': {\r\n            fontWeight: 'bolder',\r\n            fontSize: 22\r\n        }\r\n    }, \r\n    candidateRightDiv: {\r\n        flex: 2, \r\n        justifySelf: 'flex-end',\r\n        display: 'flex', \r\n        flexDirection: 'column',\r\n        padding: '10px 0',\r\n        justifyContent: 'space-between',\r\n        '& #candidateElected': {\r\n            display: 'flex', \r\n            alignItems: 'center',\r\n            justifyContent: 'flex-end',\r\n            fontSize: 14\r\n        }\r\n    },\r\n    votesDiv: {\r\n        textAlign: 'right',\r\n        '& #votesPercent': {\r\n            fontSize: 22,\r\n            fontWeight: 'bolder'\r\n        },\r\n        '& #votesTotal': {\r\n            fontSize: 14,\r\n            fontWeight: 'lighter'\r\n        }\r\n    }\r\n})\r\n\r\nconst Candidate = (props) => {\r\n    const {candidate, color} = props\r\n    const classes = styles();\r\n    return (\r\n        <div className={classes.candidateRoot}>\r\n            <div className={classes.imageDiv}>\r\n                <img style={{backgroundColor: props.color}} src=\"/images.jpg\"/>\r\n                <div id=\"partyCode\">{candidate.partyCode}</div>\r\n            </div>\r\n            <div className={classes.candidateLeftDiv}>\r\n                <div className={classes.candidateName}>\r\n                    <div id=\"candidateFirst\">{candidate.name.split(' ')[0]}</div>\r\n                    <div id=\"candidateLast\" >{candidate.name.split(' ')[candidate.name.split(' ').length - 1]}</div>\r\n                </div>\r\n                <div id=\"candidateIncumbent\">{candidate.isIncumbent && 'Incumbent'}</div>\r\n            </div>\r\n            <div className={classes.candidateRightDiv}>\r\n                <div className={classes.votesDiv}>\r\n                    <div id='votesPercent'>{candidate.percent}%</div>\r\n                    <div id='votesTotal'>{candidate.votes.toLocaleString('en')} total votes</div>\r\n                </div>\r\n                {candidate.elected ? <div id=\"candidateElected\">\r\n                    <CheckCircleIcon style={{paddingRight: 5, fontSize: 14, color: 'green'}} /> Elected\r\n                </div>\r\n                :\r\n                <div style={{fontSize: 14}}/>\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst Results = (props) => {\r\n    \r\n    const classes = styles();\r\n    const {data} = props;\r\n\r\n    const getPartyColor = (candidate) => {\r\n        let color = \"#595b5b\" \r\n        if (props.parties.data) {\r\n            console.log(props.parties.data)\r\n            let findParty = props.parties.data.find(party=>party.nameShort === candidate.partyCode)\r\n            if (findParty) {\r\n                color = findParty.colour\r\n            }\r\n        }\r\n        return color\r\n\r\n    }\r\n\r\n    return (\r\n        <div className={classes.resultsRoot}>\r\n            {props.data && \r\n        <>\r\n            <div className={classes.resultsInfo}>\r\n                <div id=\"pollsReported\">{data.pollsReported}/{data.pollsTotal} polls reported</div>\r\n                <div id=\"totalVotes\">{data.votes.toLocaleString('en')} total votes</div>\r\n            </div>\r\n                <div>\r\n                    {props.data.results.map(candidate=> {\r\n                        let partyColor = getPartyColor(candidate);\r\n                        return <Candidate color={partyColor} candidate={candidate}/>\r\n                    })}\r\n                </div>    \r\n            </>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Results","import React, {useState, useEffect} from 'react'\r\n\r\nimport {makeStyles, Slide} from '@material-ui/core';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\n\r\nimport {CSSTransition} from 'react-transition-group'\r\n\r\nimport Results from './Results'\r\n\r\nconst styles = makeStyles({\r\n    sidebar: {\r\n        flex: 2, \r\n        position: 'relative',\r\n        display: 'flex',\r\n        overflow: 'hidden'\r\n    },\r\n    title: {\r\n        width: '100%',\r\n        top: 0,\r\n        backgroundColor: 'darkgrey',\r\n        color: 'white',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        height: 50,\r\n        paddingLeft: 10,\r\n        fontWeight: 'bolder',\r\n        // textAlign: 'center',\r\n        // verticalAlign: 'middle'\r\n    },\r\n    content: {\r\n        marginBottom: 10,\r\n        height: 'calc(100% - 50px)',\r\n        overflowX: 'hidden',\r\n        overflowY: 'scroll'\r\n\r\n    },\r\n    LocationButton: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        height: 50,\r\n        paddingLeft: 10,\r\n        justifyContent: 'space-between',\r\n        '&:hover': {\r\n            backgroundColor: 'lightgrey',\r\n            cursor: 'pointer'\r\n        }\r\n    }\r\n})\r\n\r\nconst Sidebar = (props) =>  {\r\n    const [title, setTitle] = useState('Select a riding');\r\n    const [arrow, toggleArrow] = useState(0)\r\n    const classes=styles();\r\n    const [menu, setMenu] = useState('location')\r\n    const [results, setResults] = useState(null)\r\n\r\n    useEffect(()=>{\r\n        if (props.results) {\r\n            console.log(\"setting results\")\r\n            setResults(props.results)\r\n            setMenu('results')\r\n\r\n        }\r\n    },[props.results])\r\n\r\n\r\n    const handleSelectRiding = (results) => {\r\n        props.handleSelectRiding(results);\r\n        setResults(results); \r\n        setMenu('results')\r\n    }   \r\n\r\n    const LocationButton = (props) => {\r\n        return (\r\n            <div\r\n                className={`${classes.LocationButton} menu-item`}\r\n                onMouseEnter={()=>toggleArrow(props.resultId)}\r\n                onMouseLeave={()=>toggleArrow(0)}\r\n                onClick={()=>handleSelectRiding(props.resultData)}\r\n            >\r\n                {props.children}\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n    return (\r\n        <div id=\"widgetSidebar\" className={classes.sidebar}>\r\n            <div style={{position: 'absolute', top: 0, height: '50px', width: '100%', backgroundColor: 'darkgrey'}}/>\r\n            <CSSTransition \r\n                in={menu===\"location\"} \r\n                timeout={500}\r\n                unmountOnExit\r\n                classNames=\"menu-primary\"\r\n            >\r\n                <div className=\"menu\">\r\n                    <div className={classes.title}>\r\n                        {title.toUpperCase()}\r\n                    </div>\r\n                    <div className={classes.content}>\r\n                    {\r\n                        props.data && props.data.data.map(result=> {\r\n                            return (\r\n                                <LocationButton resultId={result.id} resultData={result} >{result.name}{arrow === result.id && <ChevronRightIcon/>}</LocationButton>\r\n                            )\r\n                        })\r\n                    }\r\n                </div>\r\n                </div>\r\n            </CSSTransition>\r\n            <CSSTransition \r\n                in={menu===\"results\"} \r\n                unmountOnExit\r\n                timeout={500}\r\n                classNames=\"menu-secondary\"\r\n            >\r\n                <div className=\"menu\">\r\n                    <div className={classes.title}>\r\n                        <ChevronLeftIcon onClick={()=>setMenu('location')} style={{cursor: 'pointer'}}/>{results && results.name.toUpperCase()}\r\n                    </div>\r\n                    <div className={classes.content}>\r\n                        {props.data && menu === 'results' && \r\n                            <Results \r\n                                data={results}\r\n                                parties={props.parties}\r\n                            />\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </CSSTransition>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Sidebar","import React, {useState, useEffect} from 'react';\nimport './App.css';\n\nimport {makeStyles} from '@material-ui/core'\n\nimport { TransformWrapper, TransformComponent } from \"react-zoom-pan-pinch\";\n\nimport Map from './components/Map.js'\nimport MapDiv from './components/MapTest'\nimport Sidebar from './components/Sidebar.js'\n\n\n\nconst styles = makeStyles({\n  app: {\n    height: '100%',\n    display: 'flex',\n    flexDirection: 'row',\n  }\n})\n\nfunction App() {\n\n  const [data, setData] = useState(null)\n  const [loading, toggleLoading] = useState(true)\n  const [parties, setParties] = useState(null)\n  const [selectedResults, setSelectedResults] = useState(null)\n\n  const classes = styles();\n\n  useEffect(()=>\n    getData()\n  ,[])\n\n  const getData = () => {\n    fetch('/results_2016')\n      .then(res=>res.json())\n      .then(json=>{\n        setData(json);\n        toggleLoading(false)\n      })\n    fetch('/partylist')\n      .then(res=>res.json())\n      .then(json=>{\n        setParties(json)\n      })\n  }\n\n  const handleSelectRiding = (results) => {\n    console.log(results)\n    setSelectedResults(results)\n  }\n\n  return (\n    <div id={'map-widget-app'} className={classes.app}>\n      <MapDiv \n        data={data}\n        parties={parties}\n        handleSelectRiding={handleSelectRiding}\n        selectedRiding={selectedResults}\n        />\n        {/* <TransformWrapper\n          options={{\n            limitToBounds: false,\n            maxScale: 1000,\n          }}\n        >\n          <Map />\n        </TransformWrapper> */}\n        <Sidebar \n          data={data} \n          parties={parties}\n          results={selectedResults} \n          handleSelectRiding={handleSelectRiding}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}